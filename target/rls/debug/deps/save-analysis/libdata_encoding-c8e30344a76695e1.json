{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0","program":"/Users/aidanm/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","data_encoding","--edition=2018","/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=c8e30344a76695e1","-C","extra-filename=-c8e30344a76695e1","--out-dir","/Users/aidanm/Documents/GitHub/rust-project/kronosx-rs/target/rls/debug/deps","-L","dependency=/Users/aidanm/Documents/GitHub/rust-project/kronosx-rs/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/aidanm/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/aidanm/Documents/GitHub/rust-project/kronosx-rs/target/rls/debug/deps/libdata_encoding-c8e30344a76695e1.rmeta"},"prelude":{"crate_id":{"name":"data_encoding","disambiguator":[8806133984295942330,7300510006917327341]},"crate_root":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src","external_crates":[{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10608430921611063354,8395674908515043854]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11160377025778617549,8306148414492364050]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9663231090963280434,10638099366656217316]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8613951802040500840,8986910463845771571]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4234925388164028009,14529027430798409127]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12939592188934548457,11748836853849593839]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11558539462852648633,3085906855076936354]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1355611183143696049,1082614854160048948]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[16981354374590250573,15576027856838557551]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4628010122359451059,8580279243742303134]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[13264402212939907072,7199802924690488679]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4099488279035803097,1850970931251006444]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7484089805571854691,14917719619681555181]}},{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[11408195867218467554,12842251878395859872]}}],"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":0,"byte_end":106334,"line_start":1,"line_end":2367,"column_start":1,"column_end":3}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":0,"byte_end":106334,"line_start":1,"line_end":2367,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":204},{"krate":0,"index":208},{"krate":0,"index":206},{"krate":0,"index":202},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":213},{"krate":0,"index":209},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":220},{"krate":0,"index":216},{"krate":0,"index":225},{"krate":0,"index":229},{"krate":0,"index":227},{"krate":0,"index":223},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":234},{"krate":0,"index":230},{"krate":0,"index":239},{"krate":0,"index":243},{"krate":0,"index":241},{"krate":0,"index":237},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":248},{"krate":0,"index":244},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":255},{"krate":0,"index":251},{"krate":0,"index":258},{"krate":0,"index":262},{"krate":0,"index":260},{"krate":0,"index":11},{"krate":0,"index":263},{"krate":0,"index":270},{"krate":0,"index":267},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":272},{"krate":0,"index":290},{"krate":0,"index":289},{"krate":0,"index":287},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":27},{"krate":0,"index":292},{"krate":0,"index":305},{"krate":0,"index":304},{"krate":0,"index":302},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":307},{"krate":0,"index":321},{"krate":0,"index":320},{"krate":0,"index":318},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":81},{"krate":0,"index":86},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":108},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":126},{"krate":0,"index":323},{"krate":0,"index":337},{"krate":0,"index":336},{"krate":0,"index":334},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":339},{"krate":0,"index":351},{"krate":0,"index":349},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":353},{"krate":0,"index":358},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":365},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":377},{"krate":0,"index":375},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":379},{"krate":0,"index":402},{"krate":0,"index":401},{"krate":0,"index":399},{"krate":0,"index":160},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":409},{"krate":0,"index":407},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"decl_id":null,"docs":" Efficient and customizable data-encoding functions","sig":null,"attributes":[{"value":"! Efficient and customizable data-encoding functions","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55,"byte_end":58,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This [crate] provides little-endian ASCII base-conversion encodings for","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":59,"byte_end":134,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"! bases of size 2, 4, 8, 16, 32, and 64. It supports:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":135,"byte_end":190,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":191,"byte_end":194,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! - padded and unpadded encodings","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":195,"byte_end":230,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"! - canonical encodings (e.g. trailing bits are checked)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":231,"byte_end":289,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"! - in-place encoding and decoding functions","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":290,"byte_end":336,"line_start":8,"line_end":8,"column_start":1,"column_end":47}},{"value":"! - partial decoding functions (e.g. for error recovery)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":337,"byte_end":395,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"! - character translation (e.g. for case-insensitivity)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":396,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"! - most and least significant bit-order","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":454,"byte_end":496,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"! - ignoring characters when decoding (e.g. for skipping newlines)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":497,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"! - wrapping the output when encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":566,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"! - no-std with `std` and `alloc` features","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":606,"byte_end":650,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":651,"byte_end":654,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! The performance of the encoding and decoding functions are similar to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":655,"byte_end":728,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! existing implementations (see how to run the benchmarks on [github]).","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":729,"byte_end":802,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":803,"byte_end":806,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! This is the library documentation. If you are looking for the [binary], see","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":807,"byte_end":886,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! the installation instructions on [github].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":887,"byte_end":933,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":934,"byte_end":937,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":938,"byte_end":952,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":953,"byte_end":956,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"! This crate provides predefined encodings as [constants]. These constants are","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":957,"byte_end":1037,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"! of type [`Encoding`]. This type provides encoding and decoding functions","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1038,"byte_end":1114,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"! with in-place or allocating variants. Here is an example using the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1115,"byte_end":1185,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"! allocating encoding function of [base64]:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1186,"byte_end":1231,"line_start":27,"line_end":27,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1232,"byte_end":1235,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1236,"byte_end":1247,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! use data_encoding::BASE64;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1248,"byte_end":1278,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"! assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1279,"byte_end":1345,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"! ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1346,"byte_end":1353,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1354,"byte_end":1357,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Here is an example using the in-place decoding function of [base32]:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1358,"byte_end":1430,"line_start":34,"line_end":34,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1431,"byte_end":1434,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1435,"byte_end":1446,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"! use data_encoding::BASE32;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1447,"byte_end":1477,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"! let input = b\"JBSWY3DPEB3W64TMMQ======\";","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1478,"byte_end":1522,"line_start":38,"line_end":38,"column_start":1,"column_end":45}},{"value":"! let mut output = vec![0; BASE32.decode_len(input.len()).unwrap()];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1523,"byte_end":1593,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"! let len = BASE32.decode_mut(input, &mut output).unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1594,"byte_end":1655,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"! assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1656,"byte_end":1706,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"! ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1707,"byte_end":1714,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! You are not limited to the predefined encodings. You may define your own","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1719,"byte_end":1795,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! encodings (with the same correctness and performance properties as the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1796,"byte_end":1870,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! predefined ones) using the [`Specification`] type:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1871,"byte_end":1925,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1926,"byte_end":1929,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1930,"byte_end":1941,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"! use data_encoding::Specification;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1942,"byte_end":1979,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"! let hex = {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1980,"byte_end":1995,"line_start":50,"line_end":50,"column_start":1,"column_end":16}},{"value":"!     let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":1996,"byte_end":2040,"line_start":51,"line_end":51,"column_start":1,"column_end":45}},{"value":"!     spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2041,"byte_end":2091,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"!     spec.encoding().unwrap()","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2092,"byte_end":2124,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"! };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2125,"byte_end":2131,"line_start":54,"line_end":54,"column_start":1,"column_end":7}},{"value":"! assert_eq!(hex.encode(b\"hello\"), \"68656c6c6f\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2132,"byte_end":2183,"line_start":55,"line_end":55,"column_start":1,"column_end":52}},{"value":"! ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2184,"byte_end":2191,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2192,"byte_end":2195,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! If you use the [`lazy_static`] crate, you can define a global encoding:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2196,"byte_end":2271,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2272,"byte_end":2275,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! ```rust,ignore","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2276,"byte_end":2294,"line_start":60,"line_end":60,"column_start":1,"column_end":19}},{"value":"! lazy_static! {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2295,"byte_end":2313,"line_start":61,"line_end":61,"column_start":1,"column_end":19}},{"value":"!     static ref HEX: Encoding = {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2314,"byte_end":2350,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"!         let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2351,"byte_end":2399,"line_start":63,"line_end":63,"column_start":1,"column_end":49}},{"value":"!         spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2400,"byte_end":2454,"line_start":64,"line_end":64,"column_start":1,"column_end":55}},{"value":"!         spec.translate.from.push_str(\"ABCDEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2455,"byte_end":2506,"line_start":65,"line_end":65,"column_start":1,"column_end":52}},{"value":"!         spec.translate.to.push_str(\"abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2507,"byte_end":2556,"line_start":66,"line_end":66,"column_start":1,"column_end":50}},{"value":"!         spec.encoding().unwrap()","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2557,"byte_end":2593,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"!     };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2594,"byte_end":2604,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"! }","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2605,"byte_end":2610,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2611,"byte_end":2618,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2619,"byte_end":2622,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! You may also use the [macro] library to define a compile-time custom encoding:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2623,"byte_end":2705,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2706,"byte_end":2709,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! ```rust,ignore","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2710,"byte_end":2728,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"! const HEX: Encoding = new_encoding!{","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2729,"byte_end":2769,"line_start":75,"line_end":75,"column_start":1,"column_end":41}},{"value":"!     symbols: \"0123456789abcdef\",","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2770,"byte_end":2806,"line_start":76,"line_end":76,"column_start":1,"column_end":37}},{"value":"!     translate_from: \"ABCDEF\",","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2807,"byte_end":2840,"line_start":77,"line_end":77,"column_start":1,"column_end":34}},{"value":"!     translate_to: \"abcdef\",","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2841,"byte_end":2872,"line_start":78,"line_end":78,"column_start":1,"column_end":32}},{"value":"! };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2873,"byte_end":2879,"line_start":79,"line_end":79,"column_start":1,"column_end":7}},{"value":"! const BASE64: Encoding = new_encoding!{","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2880,"byte_end":2923,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"!     symbols: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":2924,"byte_end":3008,"line_start":81,"line_end":81,"column_start":1,"column_end":85}},{"value":"!     padding: '=',","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3009,"byte_end":3030,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"! };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3031,"byte_end":3037,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"! ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3038,"byte_end":3045,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3046,"byte_end":3049,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! # Properties","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3050,"byte_end":3066,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3067,"byte_end":3070,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! The [base16], [base32], [base32hex], [base64], and [base64url] predefined","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3071,"byte_end":3148,"line_start":88,"line_end":88,"column_start":1,"column_end":78}},{"value":"! encodings are conform to [RFC4648].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3149,"byte_end":3188,"line_start":89,"line_end":89,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3189,"byte_end":3192,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"! In general, the encoding and decoding functions satisfy the following","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3193,"byte_end":3266,"line_start":91,"line_end":91,"column_start":1,"column_end":74}},{"value":"! properties:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3267,"byte_end":3282,"line_start":92,"line_end":92,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3283,"byte_end":3286,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! - They are deterministic: their output only depends on their input","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3287,"byte_end":3357,"line_start":94,"line_end":94,"column_start":1,"column_end":71}},{"value":"! - They have no side-effects: they do not modify a hidden mutable state","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3358,"byte_end":3432,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"! - They are correct: encoding then decoding gives the initial data","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3433,"byte_end":3502,"line_start":96,"line_end":96,"column_start":1,"column_end":70}},{"value":"! - They are canonical (unless [`is_canonical`] returns false): decoding then","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3503,"byte_end":3582,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"! encoding gives the initial data","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3583,"byte_end":3618,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3619,"byte_end":3622,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"! This last property is usually not satisfied by common base64 implementations","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3623,"byte_end":3703,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"! (like the `rustc-serialize` crate, the `base64` crate, or the `base64` GNU","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3704,"byte_end":3782,"line_start":101,"line_end":101,"column_start":1,"column_end":79}},{"value":"! program). This is a matter of choice and this crate has made the choice to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3783,"byte_end":3861,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"! let the user choose. Support for canonical encoding as described by the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3862,"byte_end":3937,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"! [RFC][canonical] is provided. But it is also possible to disable checking","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":3938,"byte_end":4015,"line_start":104,"line_end":104,"column_start":1,"column_end":78}},{"value":"! trailing bits, to add characters translation, to decode concatenated padded","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4016,"byte_end":4095,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"! inputs, and to ignore some characters.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4096,"byte_end":4138,"line_start":106,"line_end":106,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4139,"byte_end":4142,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"! Since the RFC specifies the encoding function on all inputs and the decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4143,"byte_end":4223,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"! function on all possible encoded outputs, the differences between","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4224,"byte_end":4293,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"! implementations come from the decoding function which may be more or less","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4294,"byte_end":4371,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"! permissive. In this crate, the decoding function of canonical encodings","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4372,"byte_end":4447,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"! rejects all inputs that are not a possible output of the encoding function.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4448,"byte_end":4527,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"! Here are some concrete examples of decoding differences between this crate,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4528,"byte_end":4607,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"! the `rustc-serialize` crate, the `base64` crate, and the `base64` GNU","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4608,"byte_end":4681,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"! program:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4682,"byte_end":4694,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4695,"byte_end":4698,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! | Input      | `data-encoding` | `rustc`  | `base64` | GNU `base64`  |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4699,"byte_end":4773,"line_start":117,"line_end":117,"column_start":1,"column_end":75}},{"value":"! | ---------- | --------------- | -------- | -------- | ------------- |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4774,"byte_end":4848,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"! | `AAB=`     | `Trailing(2)`   | `[0, 0]` | `Err(2)` | `\\x00\\x00`    |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4849,"byte_end":4923,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"! | `AA\\nB=`   | `Length(4)`     | `[0, 0]` | `Length` | `\\x00\\x00`    |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4924,"byte_end":4998,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"! | `AAB`      | `Length(0)`     | `[0, 0]` | `Err(2)` | Invalid input |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":4999,"byte_end":5073,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"! | `A\\rA\\nB=` | `Length(4)`     | `[0, 0]` | `Err(1)` | Invalid input |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5074,"byte_end":5148,"line_start":122,"line_end":122,"column_start":1,"column_end":75}},{"value":"! | `-_\\r\\n`   | `Symbol(0)`     | `[251]`  | `Err(0)` | Invalid input |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5149,"byte_end":5223,"line_start":123,"line_end":123,"column_start":1,"column_end":75}},{"value":"! | `AA==AA==` | `[0, 0]`        | `Err`    | `Err(2)` | `\\x00\\x00`    |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5224,"byte_end":5298,"line_start":124,"line_end":124,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5299,"byte_end":5302,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! We can summarize these discrepancies as follows:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5303,"byte_end":5355,"line_start":126,"line_end":126,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5356,"byte_end":5359,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"! | Discrepancy | `data-encoding` | `rustc` | `base64` | GNU `base64` |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5360,"byte_end":5433,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"! | ----------- | --------------- | ------- | -------- | ------------ |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5434,"byte_end":5507,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"! | Check trailing bits | Yes | No | No | No |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5508,"byte_end":5556,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"! | Ignored characters | None | `\\r` and `\\n` | None | `\\n` |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5557,"byte_end":5620,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! | Translated characters | None | `-_` mapped to `+/` | None | None |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5621,"byte_end":5693,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"! | Check padding | Yes | No | No | Yes |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5694,"byte_end":5737,"line_start":133,"line_end":133,"column_start":1,"column_end":44}},{"value":"! | Support concatenated input | Yes | No | No | Yes |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5738,"byte_end":5794,"line_start":134,"line_end":134,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5795,"byte_end":5798,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! This crate permits to disable checking trailing bits. It permits to ignore","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5799,"byte_end":5877,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"! some characters. It permits to translate characters. It permits to use","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5878,"byte_end":5952,"line_start":137,"line_end":137,"column_start":1,"column_end":75}},{"value":"! unpadded encodings. However, for padded encodings, support for concatenated","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":5953,"byte_end":6032,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"! inputs cannot be disabled. This is simply because it doesn't make sense to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6033,"byte_end":6111,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"! use padding if it is not to support concatenated inputs.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6112,"byte_end":6172,"line_start":140,"line_end":140,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6173,"byte_end":6176,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"! # Migration","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6177,"byte_end":6192,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6193,"byte_end":6196,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! The [changelog] describes the changes between v1 and v2. Here are the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6197,"byte_end":6270,"line_start":144,"line_end":144,"column_start":1,"column_end":74}},{"value":"! migration steps for common usage:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6271,"byte_end":6308,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6309,"byte_end":6312,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"! | v1                          | v2                          |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6313,"byte_end":6378,"line_start":147,"line_end":147,"column_start":1,"column_end":66}},{"value":"! | --------------------------- | --------------------------- |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6379,"byte_end":6444,"line_start":148,"line_end":148,"column_start":1,"column_end":66}},{"value":"! | `use data_encoding::baseNN` | `use data_encoding::BASENN` |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6445,"byte_end":6510,"line_start":149,"line_end":149,"column_start":1,"column_end":66}},{"value":"! | `baseNN::function`          | `BASENN.method`             |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6511,"byte_end":6576,"line_start":150,"line_end":150,"column_start":1,"column_end":66}},{"value":"! | `baseNN::function_nopad`    | `BASENN_NOPAD.method`       |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6577,"byte_end":6642,"line_start":151,"line_end":151,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6643,"byte_end":6646,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"! [`Encoding`]: struct.Encoding.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6647,"byte_end":6685,"line_start":153,"line_end":153,"column_start":1,"column_end":39}},{"value":"! [`Specification`]: struct.Specification.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6686,"byte_end":6734,"line_start":154,"line_end":154,"column_start":1,"column_end":49}},{"value":"! [`is_canonical`]: struct.Encoding.html#method.is_canonical","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6735,"byte_end":6797,"line_start":155,"line_end":155,"column_start":1,"column_end":63}},{"value":"! [`lazy_static`]: https://crates.io/crates/lazy_static","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6798,"byte_end":6855,"line_start":156,"line_end":156,"column_start":1,"column_end":58}},{"value":"! [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6856,"byte_end":6906,"line_start":157,"line_end":157,"column_start":1,"column_end":51}},{"value":"! [base16]: constant.HEXUPPER.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6907,"byte_end":6943,"line_start":158,"line_end":158,"column_start":1,"column_end":37}},{"value":"! [base32]: constant.BASE32.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6944,"byte_end":6978,"line_start":159,"line_end":159,"column_start":1,"column_end":35}},{"value":"! [base32hex]: constant.BASE32HEX.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":6979,"byte_end":7019,"line_start":160,"line_end":160,"column_start":1,"column_end":41}},{"value":"! [base64]: constant.BASE64.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7020,"byte_end":7054,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"! [base64url]: constant.BASE64URL.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7055,"byte_end":7095,"line_start":162,"line_end":162,"column_start":1,"column_end":41}},{"value":"! [binary]: https://crates.io/crates/data-encoding-bin","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7096,"byte_end":7152,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"! [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7153,"byte_end":7217,"line_start":164,"line_end":164,"column_start":1,"column_end":65}},{"value":"! [changelog]:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7218,"byte_end":7234,"line_start":165,"line_end":165,"column_start":1,"column_end":17}},{"value":"!     https://github.com/ia0/data-encoding/blob/master/lib/CHANGELOG.md","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7235,"byte_end":7308,"line_start":166,"line_end":166,"column_start":1,"column_end":74}},{"value":"! [constants]: index.html#constants","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7309,"byte_end":7346,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"! [crate]: https://crates.io/crates/data-encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7347,"byte_end":7398,"line_start":168,"line_end":168,"column_start":1,"column_end":52}},{"value":"! [github]: https://github.com/ia0/data-encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7399,"byte_end":7449,"line_start":169,"line_end":169,"column_start":1,"column_end":51}},{"value":"! [macro]: https://crates.io/crates/data-encoding-macro","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7450,"byte_end":7507,"line_start":170,"line_end":170,"column_start":1,"column_end":58}},{"value":"warn(unused_results, missing_docs)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":7552,"byte_end":7590,"line_start":173,"line_end":173,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10912,"byte_end":10918,"line_start":309,"line_end":309,"column_start":5,"column_end":11},"name":"Length","qualname":"::DecodeKind::Length","value":"DecodeKind::Length","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Invalid length\n","sig":null,"attributes":[{"value":"/ Invalid length","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10889,"byte_end":10907,"line_start":308,"line_end":308,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":275},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10947,"byte_end":10953,"line_start":311,"line_end":311,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::DecodeKind::Symbol","value":"DecodeKind::Symbol","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Invalid symbol\n","sig":null,"attributes":[{"value":"/ Invalid symbol","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10924,"byte_end":10942,"line_start":310,"line_end":310,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10990,"byte_end":10998,"line_start":313,"line_end":313,"column_start":5,"column_end":13},"name":"Trailing","qualname":"::DecodeKind::Trailing","value":"DecodeKind::Trailing","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Non-zero trailing bits\n","sig":null,"attributes":[{"value":"/ Non-zero trailing bits","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10959,"byte_end":10985,"line_start":312,"line_end":312,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":279},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11035,"byte_end":11042,"line_start":315,"line_end":315,"column_start":5,"column_end":12},"name":"Padding","qualname":"::DecodeKind::Padding","value":"DecodeKind::Padding","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Invalid padding length\n","sig":null,"attributes":[{"value":"/ Invalid padding length","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11004,"byte_end":11030,"line_start":314,"line_end":314,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":272},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10872,"byte_end":10882,"line_start":307,"line_end":307,"column_start":10,"column_end":20},"name":"DecodeKind","qualname":"::DecodeKind","value":"DecodeKind::{Length, Symbol, Trailing, Padding}","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279}],"decl_id":null,"docs":" Decoding error kind\n","sig":null,"attributes":[{"value":"/ Decoding error kind","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":10794,"byte_end":10817,"line_start":305,"line_end":305,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11577,"byte_end":11588,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"DecodeError","qualname":"::DecodeError","value":"DecodeError { position, kind }","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11502,"byte_end":11520,"line_start":330,"line_end":330,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":293},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11737,"byte_end":11745,"line_start":337,"line_end":337,"column_start":9,"column_end":17},"name":"position","qualname":"::DecodeError::position","value":"usize","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Error position","sig":null,"attributes":[{"value":"/ Error position","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11595,"byte_end":11613,"line_start":333,"line_end":333,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11618,"byte_end":11621,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ This position is always a valid input position and represents the first","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11626,"byte_end":11701,"line_start":335,"line_end":335,"column_start":5,"column_end":80}},{"value":"/ encountered error.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11706,"byte_end":11728,"line_start":336,"line_end":336,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":294},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11781,"byte_end":11785,"line_start":339,"line_end":339,"column_start":9,"column_end":13},"name":"kind","qualname":"::DecodeError::kind","value":"DecodeKind","parent":{"krate":0,"index":292},"children":[],"decl_id":null,"docs":" Error kind\n","sig":null,"attributes":[{"value":"/ Error kind","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11758,"byte_end":11772,"line_start":338,"line_end":338,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":307},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12161,"byte_end":12174,"line_start":352,"line_end":352,"column_start":12,"column_end":25},"name":"DecodePartial","qualname":"::DecodePartial","value":"DecodePartial { read, written, error }","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"decl_id":null,"docs":" Decoding error with partial result\n","sig":null,"attributes":[{"value":"/ Decoding error with partial result","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12066,"byte_end":12104,"line_start":350,"line_end":350,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":308},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12323,"byte_end":12327,"line_start":357,"line_end":357,"column_start":9,"column_end":13},"name":"read","qualname":"::DecodePartial::read","value":"usize","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Number of bytes read from input","sig":null,"attributes":[{"value":"/ Number of bytes read from input","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12181,"byte_end":12216,"line_start":353,"line_end":353,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12221,"byte_end":12224,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the error position: `read <=","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12229,"byte_end":12289,"line_start":355,"line_end":355,"column_start":5,"column_end":65}},{"value":"/ error.position`.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12294,"byte_end":12314,"line_start":356,"line_end":356,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":309},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12490,"byte_end":12497,"line_start":363,"line_end":363,"column_start":9,"column_end":16},"name":"written","qualname":"::DecodePartial::written","value":"usize","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Number of bytes written to output","sig":null,"attributes":[{"value":"/ Number of bytes written to output","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12341,"byte_end":12378,"line_start":359,"line_end":359,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12383,"byte_end":12386,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This number does not exceed the decoded length: `written <=","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12391,"byte_end":12454,"line_start":361,"line_end":361,"column_start":5,"column_end":68}},{"value":"/ decode_len(read)`.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12459,"byte_end":12481,"line_start":362,"line_end":362,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":310},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12538,"byte_end":12543,"line_start":366,"line_end":366,"column_start":9,"column_end":14},"name":"error","qualname":"::DecodePartial::error","value":"DecodeError","parent":{"krate":0,"index":307},"children":[],"decl_id":null,"docs":" Decoding error\n","sig":null,"attributes":[{"value":"/ Decoding error","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":12511,"byte_end":12529,"line_start":365,"line_end":365,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":324},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29799,"byte_end":29819,"line_start":839,"line_end":839,"column_start":5,"column_end":25},"name":"MostSignificantFirst","qualname":"::BitOrder::MostSignificantFirst","value":"BitOrder::MostSignificantFirst","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":" Most significant bit first","sig":null,"attributes":[{"value":"/ Most significant bit first","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29385,"byte_end":29415,"line_start":831,"line_end":831,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29420,"byte_end":29423,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ This is the most common and most intuitive bit-order. In particular,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29428,"byte_end":29500,"line_start":833,"line_end":833,"column_start":5,"column_end":77}},{"value":"/ this is the bit-order used by [RFC4648] and thus the usual hexadecimal,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29505,"byte_end":29580,"line_start":834,"line_end":834,"column_start":5,"column_end":80}},{"value":"/ base64, base32, base64url, and base32hex encodings. This is the default","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29585,"byte_end":29660,"line_start":835,"line_end":835,"column_start":5,"column_end":80}},{"value":"/ bit-order when [specifying](struct.Specification.html) a base.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29665,"byte_end":29731,"line_start":836,"line_end":836,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29736,"byte_end":29739,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29744,"byte_end":29794,"line_start":838,"line_end":838,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":326},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30240,"byte_end":30261,"line_start":854,"line_end":854,"column_start":5,"column_end":26},"name":"LeastSignificantFirst","qualname":"::BitOrder::LeastSignificantFirst","value":"BitOrder::LeastSignificantFirst","parent":{"krate":0,"index":323},"children":[],"decl_id":null,"docs":" Least significant bit first","sig":null,"attributes":[{"value":"/ Least significant bit first","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29826,"byte_end":29857,"line_start":841,"line_end":841,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29862,"byte_end":29865,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29870,"byte_end":29884,"line_start":843,"line_end":843,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29889,"byte_end":29892,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ DNSCurve [base32] uses least significant bit first:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29897,"byte_end":29952,"line_start":845,"line_end":845,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29957,"byte_end":29960,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29965,"byte_end":29976,"line_start":847,"line_end":847,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE32_DNSCURVE;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29981,"byte_end":30020,"line_start":848,"line_end":848,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(BASE32_DNSCURVE.encode(&[0x64, 0x88]), \"4321\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30025,"byte_end":30087,"line_start":849,"line_end":849,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(BASE32_DNSCURVE.decode(b\"4321\").unwrap(), vec![0x64, 0x88]);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30092,"byte_end":30167,"line_start":850,"line_end":850,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30172,"byte_end":30179,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30184,"byte_end":30187,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ [base32]: constant.BASE32_DNSCURVE.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30192,"byte_end":30235,"line_start":853,"line_end":853,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":323},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29370,"byte_end":29378,"line_start":830,"line_end":830,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"BitOrder::{MostSignificantFirst, LeastSignificantFirst}","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":326}],"decl_id":null,"docs":" Order in which bits are read from a byte","sig":null,"attributes":[{"value":"/ Order in which bits are read from a byte","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":27995,"byte_end":28039,"line_start":800,"line_end":800,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28040,"byte_end":28043,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ The base-conversion encoding is always little-endian. This means that the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28044,"byte_end":28121,"line_start":802,"line_end":802,"column_start":1,"column_end":78}},{"value":"/ least significant *byte* is always first. However, we can still choose","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28122,"byte_end":28196,"line_start":803,"line_end":803,"column_start":1,"column_end":75}},{"value":"/ whether, within a byte, this is the most significant or the least","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28197,"byte_end":28266,"line_start":804,"line_end":804,"column_start":1,"column_end":70}},{"value":"/ significant *bit* that is first. If the terminology is confusing, testing on","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28267,"byte_end":28347,"line_start":805,"line_end":805,"column_start":1,"column_end":81}},{"value":"/ an asymmetrical example should be enough to choose the correct value.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28348,"byte_end":28421,"line_start":806,"line_end":806,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28422,"byte_end":28425,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28426,"byte_end":28440,"line_start":808,"line_end":808,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28441,"byte_end":28444,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ In the following example, we can see that a base with the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28445,"byte_end":28506,"line_start":810,"line_end":810,"column_start":1,"column_end":62}},{"value":"/ `MostSignificantFirst` bit-order has the most significant bit first in the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28507,"byte_end":28585,"line_start":811,"line_end":811,"column_start":1,"column_end":79}},{"value":"/ encoded output. In particular, the output is in the same order as the bits","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28586,"byte_end":28664,"line_start":812,"line_end":812,"column_start":1,"column_end":79}},{"value":"/ in the byte. The opposite happens with the `LeastSignificantFirst`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28665,"byte_end":28735,"line_start":813,"line_end":813,"column_start":1,"column_end":71}},{"value":"/ bit-order. The least significant bit is first and the output is in the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28736,"byte_end":28810,"line_start":814,"line_end":814,"column_start":1,"column_end":75}},{"value":"/ reverse order.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28811,"byte_end":28829,"line_start":815,"line_end":815,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28830,"byte_end":28833,"line_start":816,"line_end":816,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28834,"byte_end":28845,"line_start":817,"line_end":817,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{BitOrder, Specification};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28846,"byte_end":28895,"line_start":818,"line_end":818,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28896,"byte_end":28936,"line_start":819,"line_end":819,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"01\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28937,"byte_end":28969,"line_start":820,"line_end":820,"column_start":1,"column_end":33}},{"value":"/ // spec.bit_order = BitOrder::MostSignificantFirst;  // default","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":28970,"byte_end":29037,"line_start":821,"line_end":821,"column_start":1,"column_end":68}},{"value":"/ let msb = spec.encoding().unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29038,"byte_end":29077,"line_start":822,"line_end":822,"column_start":1,"column_end":40}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29078,"byte_end":29131,"line_start":823,"line_end":823,"column_start":1,"column_end":54}},{"value":"/ let lsb = spec.encoding().unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29132,"byte_end":29171,"line_start":824,"line_end":824,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(msb.encode(&[0b01010011]), \"01010011\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29172,"byte_end":29226,"line_start":825,"line_end":825,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(lsb.encode(&[0b01010011]), \"11001010\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29227,"byte_end":29281,"line_start":826,"line_end":826,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29282,"byte_end":29289,"line_start":827,"line_end":827,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":29335,"byte_end":29360,"line_start":829,"line_end":829,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30366,"byte_end":30382,"line_start":861,"line_end":861,"column_start":10,"column_end":26},"name":"InternalEncoding","qualname":"::InternalEncoding","value":"Cow<'static, [u8]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30331,"byte_end":30356,"line_start":860,"line_end":860,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":339},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31391,"byte_end":31399,"line_start":891,"line_end":891,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::Encoding","value":"","parent":null,"children":[],"decl_id":null,"docs":" Base-conversion encoding","sig":null,"attributes":[{"value":"/ Base-conversion encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30496,"byte_end":30524,"line_start":867,"line_end":867,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30525,"byte_end":30528,"line_start":868,"line_end":868,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for technical details or how","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30529,"byte_end":30608,"line_start":869,"line_end":869,"column_start":1,"column_end":80}},{"value":"/ to define a new one.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":30609,"byte_end":30633,"line_start":870,"line_end":870,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":353},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31766,"byte_end":31775,"line_start":901,"line_end":901,"column_start":12,"column_end":21},"name":"Translate","qualname":"::Translate","value":"Translate { from, to }","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31424,"byte_end":31469,"line_start":893,"line_end":893,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31470,"byte_end":31473,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ The order matters. The first character of the `from` field is translated to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31474,"byte_end":31553,"line_start":895,"line_end":895,"column_start":1,"column_end":80}},{"value":"/ the first character of the `to` field. The second to the second. Etc.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31554,"byte_end":31627,"line_start":896,"line_end":896,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31628,"byte_end":31631,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31632,"byte_end":31704,"line_start":898,"line_end":898,"column_start":1,"column_end":73}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31729,"byte_end":31754,"line_start":900,"line_end":900,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":354},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31823,"byte_end":31827,"line_start":903,"line_end":903,"column_start":9,"column_end":13},"name":"from","qualname":"::Translate::from","value":"std::string::String","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Characters to translate from\n","sig":null,"attributes":[{"value":"/ Characters to translate from","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31782,"byte_end":31814,"line_start":902,"line_end":902,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":355},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31880,"byte_end":31882,"line_start":905,"line_end":905,"column_start":9,"column_end":11},"name":"to","qualname":"::Translate::to","value":"std::string::String","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Characters to translate to\n","sig":null,"attributes":[{"value":"/ Characters to translate to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31841,"byte_end":31871,"line_start":904,"line_end":904,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":360},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32074,"byte_end":32078,"line_start":913,"line_end":913,"column_start":12,"column_end":16},"name":"Wrap","qualname":"::Wrap","value":"Wrap { width, separator }","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31895,"byte_end":31935,"line_start":908,"line_end":908,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31936,"byte_end":31939,"line_start":909,"line_end":909,"column_start":1,"column_end":4}},{"value":"/ See [Specification](struct.Specification.html) for more information.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":31940,"byte_end":32012,"line_start":910,"line_end":910,"column_start":1,"column_end":73}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32037,"byte_end":32062,"line_start":912,"line_end":912,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":361},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32377,"byte_end":32382,"line_start":923,"line_end":923,"column_start":9,"column_end":14},"name":"width","qualname":"::Wrap::width","value":"usize","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Wrapping width","sig":null,"attributes":[{"value":"/ Wrapping width","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32085,"byte_end":32103,"line_start":914,"line_end":914,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32108,"byte_end":32111,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Must be a multiple of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32116,"byte_end":32142,"line_start":916,"line_end":916,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32147,"byte_end":32150,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ - 8 for a bit-width of 1 (binary), 3 (octal), and 5 (base32)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32155,"byte_end":32219,"line_start":918,"line_end":918,"column_start":5,"column_end":69}},{"value":"/ - 4 for a bit-width of 2 (base4) and 6 (base64)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32224,"byte_end":32275,"line_start":919,"line_end":919,"column_start":5,"column_end":56}},{"value":"/ - 2 for a bit-width of 4 (hexadecimal)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32280,"byte_end":32322,"line_start":920,"line_end":920,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32327,"byte_end":32330,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if null.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32335,"byte_end":32368,"line_start":922,"line_end":922,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":362},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32475,"byte_end":32484,"line_start":928,"line_end":928,"column_start":9,"column_end":18},"name":"separator","qualname":"::Wrap::separator","value":"std::string::String","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Wrapping characters","sig":null,"attributes":[{"value":"/ Wrapping characters","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32396,"byte_end":32419,"line_start":925,"line_end":925,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32424,"byte_end":32427,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ Wrapping is disabled if empty.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32432,"byte_end":32466,"line_start":927,"line_end":927,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":367},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42883,"byte_end":42896,"line_start":1183,"line_end":1183,"column_start":12,"column_end":25},"name":"Specification","qualname":"::Specification","value":"Specification { symbols, bit_order, check_trailing_bits, padding, ignore, wrap, translate }","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" Base-conversion specification","sig":null,"attributes":[{"value":"/ Base-conversion specification","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32497,"byte_end":32530,"line_start":931,"line_end":931,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32531,"byte_end":32534,"line_start":932,"line_end":932,"column_start":1,"column_end":4}},{"value":"/ It is possible to define custom encodings given a specification. To do so,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32535,"byte_end":32613,"line_start":933,"line_end":933,"column_start":1,"column_end":79}},{"value":"/ it is important to understand the theory first.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32614,"byte_end":32665,"line_start":934,"line_end":934,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32666,"byte_end":32669,"line_start":935,"line_end":935,"column_start":1,"column_end":4}},{"value":"/ # Theory","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32670,"byte_end":32682,"line_start":936,"line_end":936,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32683,"byte_end":32686,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ Each subsection has an equivalent subsection in the [Practice](#practice)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32687,"byte_end":32764,"line_start":938,"line_end":938,"column_start":1,"column_end":78}},{"value":"/ section.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32765,"byte_end":32777,"line_start":939,"line_end":939,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32778,"byte_end":32781,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32782,"byte_end":32795,"line_start":941,"line_end":941,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32796,"byte_end":32799,"line_start":942,"line_end":942,"column_start":1,"column_end":4}},{"value":"/ The main idea of a [base-conversion] encoding is to see `[u8]` as numbers","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32800,"byte_end":32877,"line_start":943,"line_end":943,"column_start":1,"column_end":78}},{"value":"/ written in little-endian base256 and convert them in another little-endian","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32878,"byte_end":32956,"line_start":944,"line_end":944,"column_start":1,"column_end":79}},{"value":"/ base. For performance reasons, this crate restricts this other base to be of","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":32957,"byte_end":33037,"line_start":945,"line_end":945,"column_start":1,"column_end":81}},{"value":"/ size 2 (binary), 4 (base4), 8 (octal), 16 (hexadecimal), 32 (base32), or 64","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33038,"byte_end":33117,"line_start":946,"line_end":946,"column_start":1,"column_end":80}},{"value":"/ (base64). The converted number is written as `[u8]` although it doesn't use","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33118,"byte_end":33197,"line_start":947,"line_end":947,"column_start":1,"column_end":80}},{"value":"/ all the 256 possible values of `u8`. This crate encodes to ASCII, so only","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33198,"byte_end":33275,"line_start":948,"line_end":948,"column_start":1,"column_end":78}},{"value":"/ values smaller than 128 are allowed.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33276,"byte_end":33316,"line_start":949,"line_end":949,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33317,"byte_end":33320,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/ More precisely, we need the following elements:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33321,"byte_end":33372,"line_start":951,"line_end":951,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33373,"byte_end":33376,"line_start":952,"line_end":952,"column_start":1,"column_end":4}},{"value":"/ - The bit-width N: 1 for binary, 2 for base4, 3 for octal, 4 for","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33377,"byte_end":33445,"line_start":953,"line_end":953,"column_start":1,"column_end":69}},{"value":"/ hexadecimal, 5 for base32, and 6 for base64","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33446,"byte_end":33493,"line_start":954,"line_end":954,"column_start":1,"column_end":48}},{"value":"/ - The [bit-order](enum.BitOrder.html): most or least significant bit first","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33494,"byte_end":33572,"line_start":955,"line_end":955,"column_start":1,"column_end":79}},{"value":"/ - The symbols function S from [0, 2<sup>N</sup>) (called values and written","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33573,"byte_end":33652,"line_start":956,"line_end":956,"column_start":1,"column_end":80}},{"value":"/ `uN`) to symbols (represented as `u8` although only ASCII symbols are","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33653,"byte_end":33726,"line_start":957,"line_end":957,"column_start":1,"column_end":74}},{"value":"/ allowed, i.e. smaller than 128)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33727,"byte_end":33762,"line_start":958,"line_end":958,"column_start":1,"column_end":36}},{"value":"/ - The values partial function V from ASCII to [0, 2<sup>N</sup>), i.e. from","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33763,"byte_end":33842,"line_start":959,"line_end":959,"column_start":1,"column_end":80}},{"value":"/ `u8` to `uN`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33843,"byte_end":33859,"line_start":960,"line_end":960,"column_start":1,"column_end":17}},{"value":"/ - Whether trailing bits are checked: trailing bits are leading zeros in","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33860,"byte_end":33935,"line_start":961,"line_end":961,"column_start":1,"column_end":76}},{"value":"/ theory, but since numbers are little-endian they come last","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33936,"byte_end":33998,"line_start":962,"line_end":962,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":33999,"byte_end":34002,"line_start":963,"line_end":963,"column_start":1,"column_end":4}},{"value":"/ For the encoding to be correct (i.e. encoding then decoding gives back the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34003,"byte_end":34081,"line_start":964,"line_end":964,"column_start":1,"column_end":79}},{"value":"/ initial input), V(S(i)) must be defined and equal to i for all i in [0,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34082,"byte_end":34157,"line_start":965,"line_end":965,"column_start":1,"column_end":76}},{"value":"/ 2<sup>N</sup>). For the encoding to be [canonical][canonical] (i.e.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34158,"byte_end":34229,"line_start":966,"line_end":966,"column_start":1,"column_end":72}},{"value":"/ different inputs decode to different outputs, or equivalently, decoding then","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34230,"byte_end":34310,"line_start":967,"line_end":967,"column_start":1,"column_end":81}},{"value":"/ encoding gives back the initial input), trailing bits must be checked and if","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34311,"byte_end":34391,"line_start":968,"line_end":968,"column_start":1,"column_end":81}},{"value":"/ V(i) is defined then S(V(i)) is equal to i for all i.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34392,"byte_end":34449,"line_start":969,"line_end":969,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34450,"byte_end":34453,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ Encoding and decoding are given by the following pipeline:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34454,"byte_end":34516,"line_start":971,"line_end":971,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34517,"byte_end":34520,"line_start":972,"line_end":972,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34521,"byte_end":34532,"line_start":973,"line_end":973,"column_start":1,"column_end":12}},{"value":"/ [u8] <--1--> [[bit; 8]] <--2--> [[bit; N]] <--3--> [uN] <--4--> [u8]","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34533,"byte_end":34605,"line_start":974,"line_end":974,"column_start":1,"column_end":73}},{"value":"/ 1: Map bit-order between each u8 and [bit; 8]","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34606,"byte_end":34655,"line_start":975,"line_end":975,"column_start":1,"column_end":50}},{"value":"/ 2: Base conversion between base 2^8 and base 2^N (check trailing bits)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34656,"byte_end":34730,"line_start":976,"line_end":976,"column_start":1,"column_end":75}},{"value":"/ 3: Map bit-order between each [bit; N] and uN","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34731,"byte_end":34780,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ 4: Map symbols/values between each uN and u8 (values must be defined)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34781,"byte_end":34854,"line_start":978,"line_end":978,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34855,"byte_end":34862,"line_start":979,"line_end":979,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34863,"byte_end":34866,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34867,"byte_end":34884,"line_start":981,"line_end":981,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34885,"byte_end":34888,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ All these extensions make the encoding not canonical.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34889,"byte_end":34946,"line_start":983,"line_end":983,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34947,"byte_end":34950,"line_start":984,"line_end":984,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34951,"byte_end":34966,"line_start":985,"line_end":985,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34967,"byte_end":34970,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ Padding is useful if the following conditions are met:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":34971,"byte_end":35029,"line_start":987,"line_end":987,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35030,"byte_end":35033,"line_start":988,"line_end":988,"column_start":1,"column_end":4}},{"value":"/ - the bit-width is 3 (octal), 5 (base32), or 6 (base64)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35034,"byte_end":35093,"line_start":989,"line_end":989,"column_start":1,"column_end":60}},{"value":"/ - the length of the data to encode is not known in advance","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35094,"byte_end":35156,"line_start":990,"line_end":990,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35157,"byte_end":35160,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ Bases for which the bit-width N does not divide 8 may not concatenate","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35161,"byte_end":35234,"line_start":992,"line_end":992,"column_start":1,"column_end":74}},{"value":"/ encoded data. This comes from the fact that it is not possible to make the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35235,"byte_end":35313,"line_start":993,"line_end":993,"column_start":1,"column_end":79}},{"value":"/ difference between trailing bits and encoding bits. Padding solves this","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35314,"byte_end":35389,"line_start":994,"line_end":994,"column_start":1,"column_end":76}},{"value":"/ issue by adding a new character (which is not a symbol) to discriminate","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35390,"byte_end":35465,"line_start":995,"line_end":995,"column_start":1,"column_end":76}},{"value":"/ between trailing bits and encoding bits. The idea is to work by blocks of","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35466,"byte_end":35543,"line_start":996,"line_end":996,"column_start":1,"column_end":78}},{"value":"/ lcm(8, N) bits, where lcm(8, N) is the least common multiple of 8 and N.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35544,"byte_end":35620,"line_start":997,"line_end":997,"column_start":1,"column_end":77}},{"value":"/ When such block is not complete, it is padded.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35621,"byte_end":35671,"line_start":998,"line_end":998,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35672,"byte_end":35675,"line_start":999,"line_end":999,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the padding character must not be a symbol.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35676,"byte_end":35748,"line_start":1000,"line_end":1000,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35749,"byte_end":35752,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35753,"byte_end":35792,"line_start":1002,"line_end":1002,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35793,"byte_end":35796,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ Ignoring characters when decoding is useful if after encoding some","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35797,"byte_end":35867,"line_start":1004,"line_end":1004,"column_start":1,"column_end":71}},{"value":"/ characters are added for convenience or any other reason (like wrapping). In","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35868,"byte_end":35948,"line_start":1005,"line_end":1005,"column_start":1,"column_end":81}},{"value":"/ that case we want to first ignore thoses characters before decoding.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":35949,"byte_end":36021,"line_start":1006,"line_end":1006,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36022,"byte_end":36025,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, ignored characters must not contain symbols or the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36026,"byte_end":36105,"line_start":1008,"line_end":1008,"column_start":1,"column_end":80}},{"value":"/ padding character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36106,"byte_end":36128,"line_start":1009,"line_end":1009,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36129,"byte_end":36132,"line_start":1010,"line_end":1010,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36133,"byte_end":36166,"line_start":1011,"line_end":1011,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36167,"byte_end":36170,"line_start":1012,"line_end":1012,"column_start":1,"column_end":4}},{"value":"/ Wrapping output when encoding is useful if the output is meant to be printed","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36171,"byte_end":36251,"line_start":1013,"line_end":1013,"column_start":1,"column_end":81}},{"value":"/ in a document where width is limited (typically 80-columns documents). In","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36252,"byte_end":36329,"line_start":1014,"line_end":1014,"column_start":1,"column_end":78}},{"value":"/ that case, the wrapping width and the wrapping separator have to be defined.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36330,"byte_end":36410,"line_start":1015,"line_end":1015,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36411,"byte_end":36414,"line_start":1016,"line_end":1016,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the wrapping separator characters must be ignored","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36415,"byte_end":36493,"line_start":1017,"line_end":1017,"column_start":1,"column_end":79}},{"value":"/ (see previous subsection). As such, wrapping separator characters must also","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36494,"byte_end":36573,"line_start":1018,"line_end":1018,"column_start":1,"column_end":80}},{"value":"/ not contain symbols or the padding character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36574,"byte_end":36623,"line_start":1019,"line_end":1019,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36624,"byte_end":36627,"line_start":1020,"line_end":1020,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36628,"byte_end":36670,"line_start":1021,"line_end":1021,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36671,"byte_end":36674,"line_start":1022,"line_end":1022,"column_start":1,"column_end":4}},{"value":"/ Translating characters when decoding is useful when encoded data may be","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36675,"byte_end":36750,"line_start":1023,"line_end":1023,"column_start":1,"column_end":76}},{"value":"/ copied by a humain instead of a machine. Humans tend to confuse some","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36751,"byte_end":36823,"line_start":1024,"line_end":1024,"column_start":1,"column_end":73}},{"value":"/ characters for others. In that case we want to translate those characters","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36824,"byte_end":36901,"line_start":1025,"line_end":1025,"column_start":1,"column_end":78}},{"value":"/ before decoding.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36902,"byte_end":36922,"line_start":1026,"line_end":1026,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36923,"byte_end":36926,"line_start":1027,"line_end":1027,"column_start":1,"column_end":4}},{"value":"/ To preserve correctness, the characters we translate from must not contain","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":36927,"byte_end":37005,"line_start":1028,"line_end":1028,"column_start":1,"column_end":79}},{"value":"/ symbols or the padding character, and the characters we translate to must","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37006,"byte_end":37083,"line_start":1029,"line_end":1029,"column_start":1,"column_end":78}},{"value":"/ only contain symbols or the padding character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37084,"byte_end":37134,"line_start":1030,"line_end":1030,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37135,"byte_end":37138,"line_start":1031,"line_end":1031,"column_start":1,"column_end":4}},{"value":"/ # Practice","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37139,"byte_end":37153,"line_start":1032,"line_end":1032,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37154,"byte_end":37157,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37158,"byte_end":37171,"line_start":1034,"line_end":1034,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37172,"byte_end":37175,"line_start":1035,"line_end":1035,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37176,"byte_end":37187,"line_start":1036,"line_end":1036,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, Specification};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37188,"byte_end":37237,"line_start":1037,"line_end":1037,"column_start":1,"column_end":50}},{"value":"/ fn make_encoding(symbols: &str) -> Encoding {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37238,"byte_end":37287,"line_start":1038,"line_end":1038,"column_start":1,"column_end":50}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37288,"byte_end":37332,"line_start":1039,"line_end":1039,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(symbols);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37333,"byte_end":37372,"line_start":1040,"line_end":1040,"column_start":1,"column_end":40}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37373,"byte_end":37405,"line_start":1041,"line_end":1041,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37406,"byte_end":37411,"line_start":1042,"line_end":1042,"column_start":1,"column_end":6}},{"value":"/ let binary = make_encoding(\"01\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37412,"byte_end":37449,"line_start":1043,"line_end":1043,"column_start":1,"column_end":38}},{"value":"/ let octal = make_encoding(\"01234567\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37450,"byte_end":37492,"line_start":1044,"line_end":1044,"column_start":1,"column_end":43}},{"value":"/ let hexadecimal = make_encoding(\"0123456789abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37493,"byte_end":37549,"line_start":1045,"line_end":1045,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(binary.encode(b\"Bit\"), \"010000100110100101110100\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37550,"byte_end":37616,"line_start":1046,"line_end":1046,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(octal.encode(b\"Bit\"), \"20464564\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37617,"byte_end":37666,"line_start":1047,"line_end":1047,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(hexadecimal.encode(b\"Bit\"), \"426974\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37667,"byte_end":37720,"line_start":1048,"line_end":1048,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37721,"byte_end":37728,"line_start":1049,"line_end":1049,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37729,"byte_end":37732,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ The `binary` base has 2 symbols `0` and `1` with value 0 and 1 respectively.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37733,"byte_end":37813,"line_start":1051,"line_end":1051,"column_start":1,"column_end":81}},{"value":"/ The `octal` base has 8 symbols `0` to `7` with value 0 to 7. The","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37814,"byte_end":37882,"line_start":1052,"line_end":1052,"column_start":1,"column_end":69}},{"value":"/ `hexadecimal` base has 16 symbols `0` to `9` and `a` to `f` with value 0 to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37883,"byte_end":37962,"line_start":1053,"line_end":1053,"column_start":1,"column_end":80}},{"value":"/ 15. The following diagram gives the idea of how encoding works in the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":37963,"byte_end":38036,"line_start":1054,"line_end":1054,"column_start":1,"column_end":74}},{"value":"/ previous example (note that we can actually write such diagram only because","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38037,"byte_end":38116,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ the bit-order is most significant first):","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38117,"byte_end":38162,"line_start":1056,"line_end":1056,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38163,"byte_end":38166,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38167,"byte_end":38178,"line_start":1058,"line_end":1058,"column_start":1,"column_end":12}},{"value":"/ [      octal] |  2  :  0  :  4  :  6  :  4  :  5  :  6  :  4  |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38179,"byte_end":38246,"line_start":1059,"line_end":1059,"column_start":1,"column_end":68}},{"value":"/ [     binary] |0 1 0 0 0 0 1 0|0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38247,"byte_end":38314,"line_start":1060,"line_end":1060,"column_start":1,"column_end":68}},{"value":"/ [hexadecimal] |   4   :   2   |   6   :   9   |   7   :   4   |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38315,"byte_end":38382,"line_start":1061,"line_end":1061,"column_start":1,"column_end":68}},{"value":"/                ^-- LSB                                       ^-- MSB","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38383,"byte_end":38455,"line_start":1062,"line_end":1062,"column_start":1,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38456,"byte_end":38463,"line_start":1063,"line_end":1063,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38464,"byte_end":38467,"line_start":1064,"line_end":1064,"column_start":1,"column_end":4}},{"value":"/ Note that in theory, these little-endian numbers are read from right to left","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38468,"byte_end":38548,"line_start":1065,"line_end":1065,"column_start":1,"column_end":81}},{"value":"/ (the most significant bit is at the right). Since leading zeros are","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38549,"byte_end":38620,"line_start":1066,"line_end":1066,"column_start":1,"column_end":72}},{"value":"/ meaningless (in our usual decimal notation 0123 is the same as 123), it","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38621,"byte_end":38696,"line_start":1067,"line_end":1067,"column_start":1,"column_end":76}},{"value":"/ explains why trailing bits must be zero. Trailing bits may occur when the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38697,"byte_end":38774,"line_start":1068,"line_end":1068,"column_start":1,"column_end":78}},{"value":"/ bit-width of a base does not divide 8. Only binary, base4, and hexadecimal","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38775,"byte_end":38853,"line_start":1069,"line_end":1069,"column_start":1,"column_end":79}},{"value":"/ don't have trailing bits issues. So let's consider octal and base64, which","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38854,"byte_end":38932,"line_start":1070,"line_end":1070,"column_start":1,"column_end":79}},{"value":"/ have trailing bits in similar circumstances:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38933,"byte_end":38981,"line_start":1071,"line_end":1071,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38982,"byte_end":38985,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38986,"byte_end":38997,"line_start":1073,"line_end":1073,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":38998,"byte_end":39051,"line_start":1074,"line_end":1074,"column_start":1,"column_end":54}},{"value":"/ let octal = {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39052,"byte_end":39069,"line_start":1075,"line_end":1075,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39070,"byte_end":39114,"line_start":1076,"line_end":1076,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39115,"byte_end":39157,"line_start":1077,"line_end":1077,"column_start":1,"column_end":43}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39158,"byte_end":39190,"line_start":1078,"line_end":1078,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39191,"byte_end":39197,"line_start":1079,"line_end":1079,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(BASE64_NOPAD.encode(b\"B\"), \"Qg\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39198,"byte_end":39246,"line_start":1080,"line_end":1080,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39247,"byte_end":39289,"line_start":1081,"line_end":1081,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39290,"byte_end":39297,"line_start":1082,"line_end":1082,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39298,"byte_end":39301,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ We have the following diagram, where the base64 values are written between","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39302,"byte_end":39380,"line_start":1084,"line_end":1084,"column_start":1,"column_end":79}},{"value":"/ parentheses:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39381,"byte_end":39397,"line_start":1085,"line_end":1085,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39398,"byte_end":39401,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39402,"byte_end":39413,"line_start":1087,"line_end":1087,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   : [has 4 zero trailing bits]","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39414,"byte_end":39479,"line_start":1088,"line_end":1088,"column_start":1,"column_end":66}},{"value":"/ [ octal] |  2  :  0  :  4  :       [has 1 zero trailing bit ]","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39480,"byte_end":39545,"line_start":1089,"line_end":1089,"column_start":1,"column_end":66}},{"value":"/          |0 1 0 0 0 0 1 0|0 0 0 0","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39546,"byte_end":39583,"line_start":1090,"line_end":1090,"column_start":1,"column_end":38}},{"value":"/ [ ascii] |       B       |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39584,"byte_end":39614,"line_start":1091,"line_end":1091,"column_start":1,"column_end":31}},{"value":"/                           ^-^-^-^-- leading zeros / trailing bits","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39615,"byte_end":39684,"line_start":1092,"line_end":1092,"column_start":1,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39685,"byte_end":39692,"line_start":1093,"line_end":1093,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39693,"byte_end":39696,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ ## Extensions","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39697,"byte_end":39714,"line_start":1095,"line_end":1095,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39715,"byte_end":39718,"line_start":1096,"line_end":1096,"column_start":1,"column_end":4}},{"value":"/ ### Padding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39719,"byte_end":39734,"line_start":1097,"line_end":1097,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39735,"byte_end":39738,"line_start":1098,"line_end":1098,"column_start":1,"column_end":4}},{"value":"/ For octal and base64, lcm(8, 3) == lcm(8, 6) == 24 bits or 3 bytes. For","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39739,"byte_end":39814,"line_start":1099,"line_end":1099,"column_start":1,"column_end":76}},{"value":"/ base32, lcm(8, 5) is 40 bits or 5 bytes. Let's consider octal and base64:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39815,"byte_end":39892,"line_start":1100,"line_end":1100,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39893,"byte_end":39896,"line_start":1101,"line_end":1101,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39897,"byte_end":39908,"line_start":1102,"line_end":1102,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Specification, BASE64};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39909,"byte_end":39956,"line_start":1103,"line_end":1103,"column_start":1,"column_end":48}},{"value":"/ let octal = {","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39957,"byte_end":39974,"line_start":1104,"line_end":1104,"column_start":1,"column_end":18}},{"value":"/     let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":39975,"byte_end":40019,"line_start":1105,"line_end":1105,"column_start":1,"column_end":45}},{"value":"/     spec.symbols.push_str(\"01234567\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40020,"byte_end":40062,"line_start":1106,"line_end":1106,"column_start":1,"column_end":43}},{"value":"/     spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40063,"byte_end":40096,"line_start":1107,"line_end":1107,"column_start":1,"column_end":34}},{"value":"/     spec.encoding().unwrap()","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40097,"byte_end":40129,"line_start":1108,"line_end":1108,"column_start":1,"column_end":33}},{"value":"/ };","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40130,"byte_end":40136,"line_start":1109,"line_end":1109,"column_start":1,"column_end":7}},{"value":"/ // We start encoding but we only have \"B\" for now.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40137,"byte_end":40191,"line_start":1110,"line_end":1110,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(BASE64.encode(b\"B\"), \"Qg==\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40192,"byte_end":40236,"line_start":1111,"line_end":1111,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(octal.encode(b\"B\"), \"204=====\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40237,"byte_end":40284,"line_start":1112,"line_end":1112,"column_start":1,"column_end":48}},{"value":"/ // Now we have \"it\".","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40285,"byte_end":40309,"line_start":1113,"line_end":1113,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(BASE64.encode(b\"it\"), \"aXQ=\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40310,"byte_end":40355,"line_start":1114,"line_end":1114,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(octal.encode(b\"it\"), \"322720==\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40356,"byte_end":40404,"line_start":1115,"line_end":1115,"column_start":1,"column_end":49}},{"value":"/ // By concatenating everything, we may decode the original data.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40405,"byte_end":40473,"line_start":1116,"line_end":1116,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(BASE64.decode(b\"Qg==aXQ=\").unwrap(), b\"Bit\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40474,"byte_end":40534,"line_start":1117,"line_end":1117,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(octal.decode(b\"204=====322720==\").unwrap(), b\"Bit\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40535,"byte_end":40602,"line_start":1118,"line_end":1118,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40603,"byte_end":40610,"line_start":1119,"line_end":1119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40611,"byte_end":40614,"line_start":1120,"line_end":1120,"column_start":1,"column_end":4}},{"value":"/ We have the following diagrams:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40615,"byte_end":40650,"line_start":1121,"line_end":1121,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40651,"byte_end":40654,"line_start":1122,"line_end":1122,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40655,"byte_end":40666,"line_start":1123,"line_end":1123,"column_start":1,"column_end":12}},{"value":"/ [base64] |   Q(16)   :   g(32)   :     =     :     =     |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40667,"byte_end":40729,"line_start":1124,"line_end":1124,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  2  :  0  :  4  :  =  :  =  :  =  :  =  :  =  |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40730,"byte_end":40792,"line_start":1125,"line_end":1125,"column_start":1,"column_end":63}},{"value":"/          |0 1 0 0 0 0 1 0|. . . . . . . .|. . . . . . . .|","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40793,"byte_end":40855,"line_start":1126,"line_end":1126,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       B       |        end of block aligned --^","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40856,"byte_end":40918,"line_start":1127,"line_end":1127,"column_start":1,"column_end":63}},{"value":"/          ^-- beginning of block aligned","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40919,"byte_end":40962,"line_start":1128,"line_end":1128,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40963,"byte_end":40966,"line_start":1129,"line_end":1129,"column_start":1,"column_end":4}},{"value":"/ [base64] |   a(26)   :   X(23)   :   Q(16)   :     =     |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":40967,"byte_end":41029,"line_start":1130,"line_end":1130,"column_start":1,"column_end":63}},{"value":"/ [ octal] |  3  :  2  :  2  :  7  :  2  :  0  :  =  :  =  |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41030,"byte_end":41092,"line_start":1131,"line_end":1131,"column_start":1,"column_end":63}},{"value":"/          |0 1 1 0 1 0 0 1|0 1 1 1 0 1 0 0|. . . . . . . .|","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41093,"byte_end":41155,"line_start":1132,"line_end":1132,"column_start":1,"column_end":63}},{"value":"/ [ ascii] |       i       |       t       |","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41156,"byte_end":41202,"line_start":1133,"line_end":1133,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41203,"byte_end":41210,"line_start":1134,"line_end":1134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41211,"byte_end":41214,"line_start":1135,"line_end":1135,"column_start":1,"column_end":4}},{"value":"/ ### Ignore characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41215,"byte_end":41254,"line_start":1136,"line_end":1136,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41255,"byte_end":41258,"line_start":1137,"line_end":1137,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to ignore newlines (`\\r` and `\\n`). But to keep the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41259,"byte_end":41338,"line_start":1138,"line_end":1138,"column_start":1,"column_end":80}},{"value":"/ example small, we will ignore spaces.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41339,"byte_end":41380,"line_start":1139,"line_end":1139,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41381,"byte_end":41384,"line_start":1140,"line_end":1140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41385,"byte_end":41396,"line_start":1141,"line_end":1141,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41397,"byte_end":41456,"line_start":1142,"line_end":1142,"column_start":1,"column_end":60}},{"value":"/ spec.ignore.push_str(\" \\t\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41457,"byte_end":41489,"line_start":1143,"line_end":1143,"column_start":1,"column_end":33}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41490,"byte_end":41530,"line_start":1144,"line_end":1144,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"42 69 74\"), base.decode(b\"426974\"));","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41531,"byte_end":41596,"line_start":1145,"line_end":1145,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41597,"byte_end":41604,"line_start":1146,"line_end":1146,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41605,"byte_end":41608,"line_start":1147,"line_end":1147,"column_start":1,"column_end":4}},{"value":"/ ### Wrap output when encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41609,"byte_end":41642,"line_start":1148,"line_end":1148,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41643,"byte_end":41646,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to wrap after 64 or 76 characters with a newline","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41647,"byte_end":41723,"line_start":1150,"line_end":1150,"column_start":1,"column_end":77}},{"value":"/ (`\\r\\n` or `\\n`). But to keep the example small, we will wrap after 8","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41724,"byte_end":41797,"line_start":1151,"line_end":1151,"column_start":1,"column_end":74}},{"value":"/ characters with a space.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41798,"byte_end":41826,"line_start":1152,"line_end":1152,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41827,"byte_end":41830,"line_start":1153,"line_end":1153,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41831,"byte_end":41842,"line_start":1154,"line_end":1154,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::BASE64.specification();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41843,"byte_end":41900,"line_start":1155,"line_end":1155,"column_start":1,"column_end":58}},{"value":"/ spec.wrap.width = 8;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41901,"byte_end":41925,"line_start":1156,"line_end":1156,"column_start":1,"column_end":25}},{"value":"/ spec.wrap.separator.push_str(\" \");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41926,"byte_end":41964,"line_start":1157,"line_end":1157,"column_start":1,"column_end":39}},{"value":"/ let base64 = spec.encoding().unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":41965,"byte_end":42007,"line_start":1158,"line_end":1158,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(base64.encode(b\"Hey you\"), \"SGV5IHlv dQ== \");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42008,"byte_end":42068,"line_start":1159,"line_end":1159,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42069,"byte_end":42076,"line_start":1160,"line_end":1160,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42077,"byte_end":42080,"line_start":1161,"line_end":1161,"column_start":1,"column_end":4}},{"value":"/ Note that the output always ends with the separator.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42081,"byte_end":42137,"line_start":1162,"line_end":1162,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42138,"byte_end":42141,"line_start":1163,"line_end":1163,"column_start":1,"column_end":4}},{"value":"/ ### Translate characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42142,"byte_end":42184,"line_start":1164,"line_end":1164,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42185,"byte_end":42188,"line_start":1165,"line_end":1165,"column_start":1,"column_end":4}},{"value":"/ The typical use-case is to translate lowercase to uppercase or reciprocally,","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42189,"byte_end":42269,"line_start":1166,"line_end":1166,"column_start":1,"column_end":81}},{"value":"/ but it is also used for letters that look alike, like `O0` or `Il1`. Let's","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42270,"byte_end":42348,"line_start":1167,"line_end":1167,"column_start":1,"column_end":79}},{"value":"/ illustrate both examples.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42349,"byte_end":42378,"line_start":1168,"line_end":1168,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42379,"byte_end":42382,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42383,"byte_end":42394,"line_start":1170,"line_end":1170,"column_start":1,"column_end":12}},{"value":"/ let mut spec = data_encoding::HEXLOWER.specification();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42395,"byte_end":42454,"line_start":1171,"line_end":1171,"column_start":1,"column_end":60}},{"value":"/ spec.translate.from.push_str(\"ABCDEFOIl\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42455,"byte_end":42501,"line_start":1172,"line_end":1172,"column_start":1,"column_end":47}},{"value":"/ spec.translate.to.push_str(\"abcdef011\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42502,"byte_end":42546,"line_start":1173,"line_end":1173,"column_start":1,"column_end":45}},{"value":"/ let base = spec.encoding().unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42547,"byte_end":42587,"line_start":1174,"line_end":1174,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(base.decode(b\"BOIl\"), base.decode(b\"b011\"));","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42588,"byte_end":42647,"line_start":1175,"line_end":1175,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42648,"byte_end":42655,"line_start":1176,"line_end":1176,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42656,"byte_end":42659,"line_start":1177,"line_end":1177,"column_start":1,"column_end":4}},{"value":"/ [base-conversion]:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42660,"byte_end":42682,"line_start":1178,"line_end":1178,"column_start":1,"column_end":23}},{"value":"/     https://en.wikipedia.org/wiki/Positional_notation#Base_conversion","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42683,"byte_end":42756,"line_start":1179,"line_end":1179,"column_start":1,"column_end":74}},{"value":"/ [canonical]: https://tools.ietf.org/html/rfc4648#section-3.5","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42757,"byte_end":42821,"line_start":1180,"line_end":1180,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42846,"byte_end":42871,"line_start":1182,"line_end":1182,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":368},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43078,"byte_end":43085,"line_start":1188,"line_end":1188,"column_start":9,"column_end":16},"name":"symbols","qualname":"::Specification::symbols","value":"std::string::String","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Symbols","sig":null,"attributes":[{"value":"/ Symbols","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42903,"byte_end":42914,"line_start":1184,"line_end":1184,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42919,"byte_end":42922,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ The number of symbols must be 2, 4, 8, 16, 32, or 64. Symbols must be","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":42927,"byte_end":43000,"line_start":1186,"line_end":1186,"column_start":5,"column_end":78}},{"value":"/ ASCII characters (smaller than 128) and they must be unique.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43005,"byte_end":43069,"line_start":1187,"line_end":1187,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":369},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43224,"byte_end":43233,"line_start":1194,"line_end":1194,"column_start":9,"column_end":18},"name":"bit_order","qualname":"::Specification::bit_order","value":"BitOrder","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Bit-order","sig":null,"attributes":[{"value":"/ Bit-order","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43100,"byte_end":43113,"line_start":1190,"line_end":1190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43118,"byte_end":43121,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ The default is to use most significant bit first since it is the most","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43126,"byte_end":43199,"line_start":1192,"line_end":1192,"column_start":5,"column_end":78}},{"value":"/ common.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43204,"byte_end":43215,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":370},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43421,"byte_end":43440,"line_start":1200,"line_end":1200,"column_start":9,"column_end":28},"name":"check_trailing_bits","qualname":"::Specification::check_trailing_bits","value":"bool","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Check trailing bits","sig":null,"attributes":[{"value":"/ Check trailing bits","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43250,"byte_end":43273,"line_start":1196,"line_end":1196,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43278,"byte_end":43281,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ The default is to check trailing bits. This field is ignored when","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43286,"byte_end":43355,"line_start":1198,"line_end":1198,"column_start":5,"column_end":74}},{"value":"/ unnecessary (i.e. for base2, base4, and base16).","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43360,"byte_end":43412,"line_start":1199,"line_end":1199,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":371},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43594,"byte_end":43601,"line_start":1206,"line_end":1206,"column_start":9,"column_end":16},"name":"padding","qualname":"::Specification::padding","value":"std::option::Option<char>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Padding","sig":null,"attributes":[{"value":"/ Padding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43453,"byte_end":43464,"line_start":1202,"line_end":1202,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43469,"byte_end":43472,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ The default is to not use padding. The padding character must be ASCII","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43477,"byte_end":43551,"line_start":1204,"line_end":1204,"column_start":5,"column_end":79}},{"value":"/ and must not be a symbol.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43556,"byte_end":43585,"line_start":1205,"line_end":1205,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":372},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43837,"byte_end":43843,"line_start":1212,"line_end":1212,"column_start":9,"column_end":15},"name":"ignore","qualname":"::Specification::ignore","value":"std::string::String","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Characters to ignore when decoding","sig":null,"attributes":[{"value":"/ Characters to ignore when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43622,"byte_end":43660,"line_start":1208,"line_end":1208,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43665,"byte_end":43668,"line_start":1209,"line_end":1209,"column_start":5,"column_end":8}},{"value":"/ The default is to not ignore characters when decoding. The characters to","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43673,"byte_end":43749,"line_start":1210,"line_end":1210,"column_start":5,"column_end":81}},{"value":"/ ignore must be ASCII and must not be symbols or the padding character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43754,"byte_end":43828,"line_start":1211,"line_end":1211,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":373},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44080,"byte_end":44084,"line_start":1219,"line_end":1219,"column_start":9,"column_end":13},"name":"wrap","qualname":"::Specification::wrap","value":"Wrap","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" How to wrap the output when encoding","sig":null,"attributes":[{"value":"/ How to wrap the output when encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43858,"byte_end":43898,"line_start":1214,"line_end":1214,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43903,"byte_end":43906,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ The default is to not wrap the output when encoding. The wrapping","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43911,"byte_end":43980,"line_start":1216,"line_end":1216,"column_start":5,"column_end":74}},{"value":"/ characters must be ASCII and must not be symbols or the padding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":43985,"byte_end":44052,"line_start":1217,"line_end":1217,"column_start":5,"column_end":72}},{"value":"/ character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44057,"byte_end":44071,"line_start":1218,"line_end":1218,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":374},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44493,"byte_end":44502,"line_start":1228,"line_end":1228,"column_start":9,"column_end":18},"name":"translate","qualname":"::Specification::translate","value":"Translate","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" How to translate characters when decoding","sig":null,"attributes":[{"value":"/ How to translate characters when decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44097,"byte_end":44142,"line_start":1221,"line_end":1221,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44147,"byte_end":44150,"line_start":1222,"line_end":1222,"column_start":5,"column_end":8}},{"value":"/ The default is to not translate characters when decoding. The characters","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44155,"byte_end":44231,"line_start":1223,"line_end":1223,"column_start":5,"column_end":81}},{"value":"/ to translate from must be ASCII and must not have already been assigned","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44236,"byte_end":44311,"line_start":1224,"line_end":1224,"column_start":5,"column_end":80}},{"value":"/ a semantics. The characters to translate to must be ASCII and must have","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44316,"byte_end":44391,"line_start":1225,"line_end":1225,"column_start":5,"column_end":80}},{"value":"/ been assigned a semantics (symbol, padding character, or ignored","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44396,"byte_end":44464,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}},{"value":"/ character).","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44469,"byte_end":44484,"line_start":1227,"line_end":1227,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45618,"byte_end":45628,"line_start":1276,"line_end":1276,"column_start":12,"column_end":22},"name":"encode_len","qualname":"<Encoding>::encode_len","value":"fn (&self, len: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the encoded length of an input of length `len`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45422,"byte_end":45480,"line_start":1271,"line_end":1271,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45485,"byte_end":45488,"line_start":1272,"line_end":1272,"column_start":5,"column_end":8}},{"value":"/ See [`encode_mut`] for when to use it.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45493,"byte_end":45535,"line_start":1273,"line_end":1273,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45540,"byte_end":45543,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ [`encode_mut`]: struct.Encoding.html#method.encode_mut","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45548,"byte_end":45606,"line_start":1275,"line_end":1275,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46537,"byte_end":46547,"line_start":1305,"line_end":1305,"column_start":12,"column_end":22},"name":"encode_mut","qualname":"<Encoding>::encode_mut","value":"fn (&self, input: &[u8], output: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Encodes `input` in `output`","sig":null,"attributes":[{"value":"/ Encodes `input` in `output`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45896,"byte_end":45927,"line_start":1285,"line_end":1285,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45932,"byte_end":45935,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45940,"byte_end":45952,"line_start":1287,"line_end":1287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45957,"byte_end":45960,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":45965,"byte_end":46027,"line_start":1289,"line_end":1289,"column_start":5,"column_end":67}},{"value":"/ [`encode_len`] for the `input` length.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46032,"byte_end":46074,"line_start":1290,"line_end":1290,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46079,"byte_end":46082,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46087,"byte_end":46101,"line_start":1292,"line_end":1292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46106,"byte_end":46109,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46114,"byte_end":46125,"line_start":1294,"line_end":1294,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46130,"byte_end":46160,"line_start":1295,"line_end":1295,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46165,"byte_end":46201,"line_start":1296,"line_end":1296,"column_start":5,"column_end":41}},{"value":"/ let input = b\"Hello world\";","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46206,"byte_end":46237,"line_start":1297,"line_end":1297,"column_start":5,"column_end":36}},{"value":"/ let output = &mut buffer[0 .. BASE64.encode_len(input.len())];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46242,"byte_end":46308,"line_start":1298,"line_end":1298,"column_start":5,"column_end":71}},{"value":"/ BASE64.encode_mut(input, output);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46313,"byte_end":46350,"line_start":1299,"line_end":1299,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(output, b\"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46355,"byte_end":46399,"line_start":1300,"line_end":1300,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46404,"byte_end":46411,"line_start":1301,"line_end":1301,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46416,"byte_end":46419,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ [`encode_len`]: struct.Encoding.html#method.encode_len","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46424,"byte_end":46482,"line_start":1303,"line_end":1303,"column_start":5,"column_end":63}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46487,"byte_end":46525,"line_start":1304,"line_end":1304,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47196,"byte_end":47202,"line_start":1325,"line_end":1325,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoding>::encode","value":"fn (&self, input: &[u8]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns encoded `input`","sig":null,"attributes":[{"value":"/ Returns encoded `input`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46958,"byte_end":46985,"line_start":1316,"line_end":1316,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46990,"byte_end":46993,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":46998,"byte_end":47012,"line_start":1318,"line_end":1318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47017,"byte_end":47020,"line_start":1319,"line_end":1319,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47025,"byte_end":47036,"line_start":1320,"line_end":1320,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47041,"byte_end":47071,"line_start":1321,"line_end":1321,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.encode(b\"Hello world\"), \"SGVsbG8gd29ybGQ=\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47076,"byte_end":47142,"line_start":1322,"line_end":1322,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47147,"byte_end":47154,"line_start":1323,"line_end":1323,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47159,"byte_end":47184,"line_start":1324,"line_end":1324,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47901,"byte_end":47911,"line_start":1343,"line_end":1343,"column_start":12,"column_end":22},"name":"decode_len","qualname":"<Encoding>::decode_len","value":"fn (&self, len: usize) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the decoded length of an input of length `len`","sig":null,"attributes":[{"value":"/ Returns the decoded length of an input of length `len`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47413,"byte_end":47471,"line_start":1331,"line_end":1331,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47476,"byte_end":47479,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ See [`decode_mut`] for when to use it.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47484,"byte_end":47526,"line_start":1333,"line_end":1333,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47531,"byte_end":47534,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47539,"byte_end":47551,"line_start":1335,"line_end":1335,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47556,"byte_end":47559,"line_start":1336,"line_end":1336,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `len` is invalid. The error kind is [`Length`] and","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47564,"byte_end":47638,"line_start":1337,"line_end":1337,"column_start":5,"column_end":79}},{"value":"/ the [position] is the greatest valid input length.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47643,"byte_end":47697,"line_start":1338,"line_end":1338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47702,"byte_end":47705,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ [`decode_mut`]: struct.Encoding.html#method.decode_mut","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47710,"byte_end":47768,"line_start":1340,"line_end":1340,"column_start":5,"column_end":63}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47773,"byte_end":47824,"line_start":1341,"line_end":1341,"column_start":5,"column_end":56}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":47829,"byte_end":47889,"line_start":1342,"line_end":1342,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50028,"byte_end":50038,"line_start":1396,"line_end":1396,"column_start":12,"column_end":22},"name":"decode_mut","qualname":"<Encoding>::decode_mut","value":"fn (&self, input: &[u8], output: &mut [u8]) -> Result<usize, DecodePartial>","parent":null,"children":[],"decl_id":null,"docs":" Decodes `input` in `output`","sig":null,"attributes":[{"value":"/ Decodes `input` in `output`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48317,"byte_end":48348,"line_start":1356,"line_end":1356,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48353,"byte_end":48356,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ Returns the length of the decoded output. This length may be smaller","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48361,"byte_end":48433,"line_start":1358,"line_end":1358,"column_start":5,"column_end":77}},{"value":"/ than the output length if the input contained padding or ignored","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48438,"byte_end":48506,"line_start":1359,"line_end":1359,"column_start":5,"column_end":73}},{"value":"/ characters. The output bytes after the returned length are not","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48511,"byte_end":48577,"line_start":1360,"line_end":1360,"column_start":5,"column_end":71}},{"value":"/ initialized and should not be read.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48582,"byte_end":48621,"line_start":1361,"line_end":1361,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48626,"byte_end":48629,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48634,"byte_end":48646,"line_start":1363,"line_end":1363,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48651,"byte_end":48654,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ Panics if the `output` length does not match the result of","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48659,"byte_end":48721,"line_start":1365,"line_end":1365,"column_start":5,"column_end":67}},{"value":"/ [`decode_len`] for the `input` length. Also panics if `decode_len` fails","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48726,"byte_end":48802,"line_start":1366,"line_end":1366,"column_start":5,"column_end":81}},{"value":"/ for the `input` length.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48807,"byte_end":48834,"line_start":1367,"line_end":1367,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48839,"byte_end":48842,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48847,"byte_end":48859,"line_start":1369,"line_end":1369,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48864,"byte_end":48867,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. See [`decode`] for more details.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48872,"byte_end":48948,"line_start":1371,"line_end":1371,"column_start":5,"column_end":81}},{"value":"/ The are two differences though:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48953,"byte_end":48988,"line_start":1372,"line_end":1372,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":48993,"byte_end":48996,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] may be returned only if the encoding allows ignored","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49001,"byte_end":49069,"line_start":1374,"line_end":1374,"column_start":5,"column_end":73}},{"value":"/ characters, because otherwise this is already checked by [`decode_len`].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49074,"byte_end":49150,"line_start":1375,"line_end":1375,"column_start":5,"column_end":81}},{"value":"/ - The [`read`] first bytes of the input have been successfully decoded","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49155,"byte_end":49229,"line_start":1376,"line_end":1376,"column_start":5,"column_end":79}},{"value":"/ to the [`written`] first bytes of the output.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49234,"byte_end":49283,"line_start":1377,"line_end":1377,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49288,"byte_end":49291,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49296,"byte_end":49310,"line_start":1379,"line_end":1379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49315,"byte_end":49318,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49323,"byte_end":49334,"line_start":1381,"line_end":1381,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49339,"byte_end":49369,"line_start":1382,"line_end":1382,"column_start":5,"column_end":35}},{"value":"/ # let mut buffer = vec![0; 100];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49374,"byte_end":49410,"line_start":1383,"line_end":1383,"column_start":5,"column_end":41}},{"value":"/ let input = b\"SGVsbA==byB3b3JsZA==\";","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49415,"byte_end":49455,"line_start":1384,"line_end":1384,"column_start":5,"column_end":45}},{"value":"/ let output = &mut buffer[0 .. BASE64.decode_len(input.len()).unwrap()];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49460,"byte_end":49535,"line_start":1385,"line_end":1385,"column_start":5,"column_end":80}},{"value":"/ let len = BASE64.decode_mut(input, output).unwrap();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49540,"byte_end":49596,"line_start":1386,"line_end":1386,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&output[0 .. len], b\"Hello world\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49601,"byte_end":49651,"line_start":1387,"line_end":1387,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49656,"byte_end":49663,"line_start":1388,"line_end":1388,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49668,"byte_end":49671,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ [`decode_len`]: struct.Encoding.html#method.decode_len","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49676,"byte_end":49734,"line_start":1390,"line_end":1390,"column_start":5,"column_end":63}},{"value":"/ [`decode`]: struct.Encoding.html#method.decode","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49739,"byte_end":49789,"line_start":1391,"line_end":1391,"column_start":5,"column_end":55}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49794,"byte_end":49845,"line_start":1392,"line_end":1392,"column_start":5,"column_end":56}},{"value":"/ [`read`]: struct.DecodePartial.html#structfield.read","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49850,"byte_end":49906,"line_start":1393,"line_end":1393,"column_start":5,"column_end":61}},{"value":"/ [`written`]: struct.DecodePartial.html#structfield.written","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49911,"byte_end":49973,"line_start":1394,"line_end":1394,"column_start":5,"column_end":67}},{"value":"allow(clippy :: cognitive_complexity)","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":49978,"byte_end":50016,"line_start":1395,"line_end":1395,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51861,"byte_end":51867,"line_start":1438,"line_end":1438,"column_start":12,"column_end":18},"name":"decode","qualname":"<Encoding>::decode","value":"fn (&self, input: &[u8]) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns decoded `input`","sig":null,"attributes":[{"value":"/ Returns decoded `input`","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50529,"byte_end":50556,"line_start":1408,"line_end":1408,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50561,"byte_end":50564,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50569,"byte_end":50581,"line_start":1410,"line_end":1410,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50586,"byte_end":50589,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` is invalid. The error kind can be:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50594,"byte_end":50660,"line_start":1412,"line_end":1412,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50665,"byte_end":50668,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ - [`Length`] if the input length is invalid. The [position] is the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50673,"byte_end":50743,"line_start":1414,"line_end":1414,"column_start":5,"column_end":75}},{"value":"/ greatest valid input length.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50748,"byte_end":50780,"line_start":1415,"line_end":1415,"column_start":5,"column_end":37}},{"value":"/ - [`Symbol`] if the input contains an invalid character. The [position]","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50785,"byte_end":50860,"line_start":1416,"line_end":1416,"column_start":5,"column_end":80}},{"value":"/ is the first invalid character.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50865,"byte_end":50900,"line_start":1417,"line_end":1417,"column_start":5,"column_end":40}},{"value":"/ - [`Trailing`] if the input has non-zero trailing bits. This is only","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50905,"byte_end":50977,"line_start":1418,"line_end":1418,"column_start":5,"column_end":77}},{"value":"/ possible if the encoding checks trailing bits. The [position] is the","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":50982,"byte_end":51054,"line_start":1419,"line_end":1419,"column_start":5,"column_end":77}},{"value":"/ first character containing non-zero trailing bits.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51059,"byte_end":51113,"line_start":1420,"line_end":1420,"column_start":5,"column_end":59}},{"value":"/ - [`Padding`] if the input has an invalid padding length. This is only","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51118,"byte_end":51192,"line_start":1421,"line_end":1421,"column_start":5,"column_end":79}},{"value":"/ possible if the encoding uses padding. The [position] is the first","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51197,"byte_end":51267,"line_start":1422,"line_end":1422,"column_start":5,"column_end":75}},{"value":"/ padding character of the first padding of invalid length.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51272,"byte_end":51333,"line_start":1423,"line_end":1423,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51338,"byte_end":51341,"line_start":1424,"line_end":1424,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51346,"byte_end":51360,"line_start":1425,"line_end":1425,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51365,"byte_end":51368,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51373,"byte_end":51384,"line_start":1427,"line_end":1427,"column_start":5,"column_end":16}},{"value":"/ use data_encoding::BASE64;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51389,"byte_end":51419,"line_start":1428,"line_end":1428,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(BASE64.decode(b\"SGVsbA==byB3b3JsZA==\").unwrap(), b\"Hello world\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51424,"byte_end":51504,"line_start":1429,"line_end":1429,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51509,"byte_end":51516,"line_start":1430,"line_end":1430,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51521,"byte_end":51524,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ [`Length`]: enum.DecodeKind.html#variant.Length","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51529,"byte_end":51580,"line_start":1432,"line_end":1432,"column_start":5,"column_end":56}},{"value":"/ [`Symbol`]: enum.DecodeKind.html#variant.Symbol","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51585,"byte_end":51636,"line_start":1433,"line_end":1433,"column_start":5,"column_end":56}},{"value":"/ [`Trailing`]: enum.DecodeKind.html#variant.Trailing","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51641,"byte_end":51696,"line_start":1434,"line_end":1434,"column_start":5,"column_end":60}},{"value":"/ [`Padding`]: enum.DecodeKind.html#variant.Padding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51701,"byte_end":51754,"line_start":1435,"line_end":1435,"column_start":5,"column_end":58}},{"value":"/ [position]: struct.DecodeError.html#structfield.position","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51759,"byte_end":51819,"line_start":1436,"line_end":1436,"column_start":5,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":51824,"byte_end":51849,"line_start":1437,"line_end":1437,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52176,"byte_end":52185,"line_start":1446,"line_end":1446,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<Encoding>::bit_width","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the bit-width\n","sig":null,"attributes":[{"value":"/ Returns the bit-width","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52139,"byte_end":52164,"line_start":1445,"line_end":1445,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52521,"byte_end":52533,"line_start":1458,"line_end":1458,"column_start":12,"column_end":24},"name":"is_canonical","qualname":"<Encoding>::is_canonical","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the encoding is canonical","sig":null,"attributes":[{"value":"/ Returns whether the encoding is canonical","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52234,"byte_end":52279,"line_start":1450,"line_end":1450,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52284,"byte_end":52287,"line_start":1451,"line_end":1451,"column_start":5,"column_end":8}},{"value":"/ An encoding is not canonical if one of the following conditions holds:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52292,"byte_end":52366,"line_start":1452,"line_end":1452,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52371,"byte_end":52374,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ - trailing bits are not checked","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52379,"byte_end":52414,"line_start":1454,"line_end":1454,"column_start":5,"column_end":40}},{"value":"/ - padding is used","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52419,"byte_end":52440,"line_start":1455,"line_end":1455,"column_start":5,"column_end":26}},{"value":"/ - characters are ignored","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52445,"byte_end":52473,"line_start":1456,"line_end":1456,"column_start":5,"column_end":33}},{"value":"/ - characters are translated","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":52478,"byte_end":52509,"line_start":1457,"line_end":1457,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":53092,"byte_end":53105,"line_start":1481,"line_end":1481,"column_start":12,"column_end":25},"name":"specification","qualname":"<Encoding>::specification","value":"fn (&self) -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns the encoding specification\n","sig":null,"attributes":[{"value":"/ Returns the encoding specification","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":53012,"byte_end":53050,"line_start":1479,"line_end":1479,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":53055,"byte_end":53080,"line_start":1480,"line_end":1480,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":54555,"byte_end":54567,"line_start":1520,"line_end":1520,"column_start":18,"column_end":30},"name":"internal_new","qualname":"<Encoding>::internal_new","value":"fn (implementation: &'static [u8]) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":54853,"byte_end":54876,"line_start":1529,"line_end":1529,"column_start":12,"column_end":35},"name":"internal_implementation","qualname":"<Encoding>::internal_implementation","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55294,"byte_end":55312,"line_start":1552,"line_end":1552,"column_start":12,"column_end":30},"name":"SpecificationError","qualname":"::SpecificationError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Specification error\n","sig":null,"attributes":[{"value":"/ Specification error","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55203,"byte_end":55226,"line_start":1549,"line_end":1549,"column_start":1,"column_end":24}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55257,"byte_end":55282,"line_start":1551,"line_end":1551,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56778,"byte_end":56781,"line_start":1589,"line_end":1589,"column_start":12,"column_end":15},"name":"new","qualname":"<Specification>::new","value":"fn () -> Specification","parent":null,"children":[],"decl_id":null,"docs":" Returns a default specification\n","sig":null,"attributes":[{"value":"/ Returns a default specification","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56731,"byte_end":56766,"line_start":1588,"line_end":1588,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57307,"byte_end":57315,"line_start":1606,"line_end":1606,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Specification>::encoding","value":"fn (&self) -> Result<Encoding, SpecificationError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the specified encoding","sig":null,"attributes":[{"value":"/ Returns the specified encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57170,"byte_end":57204,"line_start":1601,"line_end":1601,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57209,"byte_end":57212,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57217,"byte_end":57229,"line_start":1603,"line_end":1603,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57234,"byte_end":57237,"line_start":1604,"line_end":1604,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the specification is invalid.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":57242,"byte_end":57295,"line_start":1605,"line_end":1605,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":172},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60976,"byte_end":60984,"line_start":1711,"line_end":1711,"column_start":11,"column_end":19},"name":"HEXLOWER","qualname":"::HEXLOWER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60423,"byte_end":60457,"line_start":1692,"line_end":1692,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60458,"byte_end":60461,"line_start":1693,"line_end":1693,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60462,"byte_end":60503,"line_start":1694,"line_end":1694,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60504,"byte_end":60507,"line_start":1695,"line_end":1695,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60508,"byte_end":60519,"line_start":1696,"line_end":1696,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60520,"byte_end":60571,"line_start":1697,"line_end":1697,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60572,"byte_end":60612,"line_start":1698,"line_end":1698,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60613,"byte_end":60659,"line_start":1699,"line_end":1699,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXLOWER, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60660,"byte_end":60711,"line_start":1700,"line_end":1700,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60712,"byte_end":60719,"line_start":1701,"line_end":1701,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60720,"byte_end":60723,"line_start":1702,"line_end":1702,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60724,"byte_end":60738,"line_start":1703,"line_end":1703,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60739,"byte_end":60742,"line_start":1704,"line_end":1704,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60743,"byte_end":60754,"line_start":1705,"line_end":1705,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60755,"byte_end":60787,"line_start":1706,"line_end":1706,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60788,"byte_end":60836,"line_start":1707,"line_end":1707,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER.decode(b\"deadbeef\").unwrap(), deadbeef);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60837,"byte_end":60901,"line_start":1708,"line_end":1708,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXLOWER.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60902,"byte_end":60957,"line_start":1709,"line_end":1709,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":60958,"byte_end":60965,"line_start":1710,"line_end":1710,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":174},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64403,"byte_end":64422,"line_start":1768,"line_end":1768,"column_start":11,"column_end":30},"name":"HEXLOWER_PERMISSIVE","qualname":"::HEXLOWER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Lowercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Lowercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63507,"byte_end":63572,"line_start":1740,"line_end":1740,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63573,"byte_end":63576,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63577,"byte_end":63618,"line_start":1742,"line_end":1742,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63619,"byte_end":63622,"line_start":1743,"line_end":1743,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63623,"byte_end":63634,"line_start":1744,"line_end":1744,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXLOWER_PERMISSIVE};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63635,"byte_end":63697,"line_start":1745,"line_end":1745,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63698,"byte_end":63738,"line_start":1746,"line_end":1746,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63739,"byte_end":63785,"line_start":1747,"line_end":1747,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"ABCDEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63786,"byte_end":63829,"line_start":1748,"line_end":1748,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63830,"byte_end":63871,"line_start":1749,"line_end":1749,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63872,"byte_end":63934,"line_start":1750,"line_end":1750,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63935,"byte_end":63942,"line_start":1751,"line_end":1751,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63943,"byte_end":63946,"line_start":1752,"line_end":1752,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63947,"byte_end":63961,"line_start":1753,"line_end":1753,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63962,"byte_end":63965,"line_start":1754,"line_end":1754,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63966,"byte_end":63977,"line_start":1755,"line_end":1755,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXLOWER_PERMISSIVE;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":63978,"byte_end":64021,"line_start":1756,"line_end":1756,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64022,"byte_end":64070,"line_start":1757,"line_end":1757,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64071,"byte_end":64146,"line_start":1758,"line_end":1758,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXLOWER_PERMISSIVE.encode(&deadbeef), \"deadbeef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64147,"byte_end":64213,"line_start":1759,"line_end":1759,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64214,"byte_end":64221,"line_start":1760,"line_end":1760,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64222,"byte_end":64225,"line_start":1761,"line_end":1761,"column_start":1,"column_end":4}},{"value":"/ You can also define a shorter name:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64226,"byte_end":64265,"line_start":1762,"line_end":1762,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64266,"byte_end":64269,"line_start":1763,"line_end":1763,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64270,"byte_end":64281,"line_start":1764,"line_end":1764,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::{Encoding, HEXLOWER_PERMISSIVE};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64282,"byte_end":64337,"line_start":1765,"line_end":1765,"column_start":1,"column_end":56}},{"value":"/ const HEX: Encoding = HEXLOWER_PERMISSIVE;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64338,"byte_end":64384,"line_start":1766,"line_end":1766,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":64385,"byte_end":64392,"line_start":1767,"line_end":1767,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":176},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67650,"byte_end":67658,"line_start":1820,"line_end":1820,"column_start":11,"column_end":19},"name":"HEXUPPER","qualname":"::HEXUPPER","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":66961,"byte_end":66995,"line_start":1797,"line_end":1797,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":66996,"byte_end":66999,"line_start":1798,"line_end":1798,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67000,"byte_end":67041,"line_start":1799,"line_end":1799,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67042,"byte_end":67045,"line_start":1800,"line_end":1800,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67046,"byte_end":67057,"line_start":1801,"line_end":1801,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67058,"byte_end":67109,"line_start":1802,"line_end":1802,"column_start":1,"column_end":52}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67110,"byte_end":67150,"line_start":1803,"line_end":1803,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67151,"byte_end":67197,"line_start":1804,"line_end":1804,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(HEXUPPER, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67198,"byte_end":67249,"line_start":1805,"line_end":1805,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67250,"byte_end":67257,"line_start":1806,"line_end":1806,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67258,"byte_end":67261,"line_start":1807,"line_end":1807,"column_start":1,"column_end":4}},{"value":"/ It is compliant with [RFC4648] and known as \"base16\" or \"hex\".","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67262,"byte_end":67328,"line_start":1808,"line_end":1808,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67329,"byte_end":67332,"line_start":1809,"line_end":1809,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67333,"byte_end":67347,"line_start":1810,"line_end":1810,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67348,"byte_end":67351,"line_start":1811,"line_end":1811,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67352,"byte_end":67363,"line_start":1812,"line_end":1812,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67364,"byte_end":67396,"line_start":1813,"line_end":1813,"column_start":1,"column_end":33}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67397,"byte_end":67445,"line_start":1814,"line_end":1814,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER.decode(b\"DEADBEEF\").unwrap(), deadbeef);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67446,"byte_end":67510,"line_start":1815,"line_end":1815,"column_start":1,"column_end":65}},{"value":"/ assert_eq!(HEXUPPER.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67511,"byte_end":67566,"line_start":1816,"line_end":1816,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67567,"byte_end":67574,"line_start":1817,"line_end":1817,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67575,"byte_end":67578,"line_start":1818,"line_end":1818,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-8","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":67579,"byte_end":67639,"line_start":1819,"line_end":1819,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":178},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70854,"byte_end":70873,"line_start":1869,"line_end":1869,"column_start":11,"column_end":30},"name":"HEXUPPER_PERMISSIVE","qualname":"::HEXUPPER_PERMISSIVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Uppercase hexadecimal encoding with case-insensitive decoding","sig":null,"attributes":[{"value":"/ Uppercase hexadecimal encoding with case-insensitive decoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70129,"byte_end":70194,"line_start":1848,"line_end":1848,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70195,"byte_end":70198,"line_start":1849,"line_end":1849,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70199,"byte_end":70240,"line_start":1850,"line_end":1850,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70241,"byte_end":70244,"line_start":1851,"line_end":1851,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70245,"byte_end":70256,"line_start":1852,"line_end":1852,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, HEXUPPER_PERMISSIVE};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70257,"byte_end":70319,"line_start":1853,"line_end":1853,"column_start":1,"column_end":63}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70320,"byte_end":70360,"line_start":1854,"line_end":1854,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70361,"byte_end":70407,"line_start":1855,"line_end":1855,"column_start":1,"column_end":47}},{"value":"/ spec.translate.from.push_str(\"abcdef\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70408,"byte_end":70451,"line_start":1856,"line_end":1856,"column_start":1,"column_end":44}},{"value":"/ spec.translate.to.push_str(\"ABCDEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70452,"byte_end":70493,"line_start":1857,"line_end":1857,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70494,"byte_end":70556,"line_start":1858,"line_end":1858,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70557,"byte_end":70564,"line_start":1859,"line_end":1859,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70565,"byte_end":70568,"line_start":1860,"line_end":1860,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70569,"byte_end":70583,"line_start":1861,"line_end":1861,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70584,"byte_end":70587,"line_start":1862,"line_end":1862,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70588,"byte_end":70599,"line_start":1863,"line_end":1863,"column_start":1,"column_end":12}},{"value":"/ use data_encoding::HEXUPPER_PERMISSIVE;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70600,"byte_end":70643,"line_start":1864,"line_end":1864,"column_start":1,"column_end":44}},{"value":"/ let deadbeef = vec![0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70644,"byte_end":70692,"line_start":1865,"line_end":1865,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.decode(b\"DeadBeef\").unwrap(), deadbeef);","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70693,"byte_end":70768,"line_start":1866,"line_end":1866,"column_start":1,"column_end":76}},{"value":"/ assert_eq!(HEXUPPER_PERMISSIVE.encode(&deadbeef), \"DEADBEEF\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70769,"byte_end":70835,"line_start":1867,"line_end":1867,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":70836,"byte_end":70843,"line_start":1868,"line_end":1868,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":180},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73802,"byte_end":73808,"line_start":1912,"line_end":1912,"column_start":11,"column_end":17},"name":"BASE32","qualname":"::BASE32","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32 encoding","sig":null,"attributes":[{"value":"/ Padded base32 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73360,"byte_end":73386,"line_start":1897,"line_end":1897,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73387,"byte_end":73390,"line_start":1898,"line_end":1898,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73391,"byte_end":73432,"line_start":1899,"line_end":1899,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73433,"byte_end":73436,"line_start":1900,"line_end":1900,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73437,"byte_end":73448,"line_start":1901,"line_end":1901,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73449,"byte_end":73498,"line_start":1902,"line_end":1902,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73499,"byte_end":73539,"line_start":1903,"line_end":1903,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73540,"byte_end":73602,"line_start":1904,"line_end":1904,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73603,"byte_end":73632,"line_start":1905,"line_end":1905,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73633,"byte_end":73682,"line_start":1906,"line_end":1906,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73683,"byte_end":73690,"line_start":1907,"line_end":1907,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73691,"byte_end":73694,"line_start":1908,"line_end":1908,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73695,"byte_end":73726,"line_start":1909,"line_end":1909,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73727,"byte_end":73730,"line_start":1910,"line_end":1910,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-6","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":73731,"byte_end":73791,"line_start":1911,"line_end":1911,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":182},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76583,"byte_end":76595,"line_start":1950,"line_end":1950,"column_start":11,"column_end":23},"name":"BASE32_NOPAD","qualname":"::BASE32_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32 encoding","sig":null,"attributes":[{"value":"/ Unpadded base32 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76258,"byte_end":76286,"line_start":1940,"line_end":1940,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76287,"byte_end":76290,"line_start":1941,"line_end":1941,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76291,"byte_end":76332,"line_start":1942,"line_end":1942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76333,"byte_end":76336,"line_start":1943,"line_end":1943,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76337,"byte_end":76348,"line_start":1944,"line_end":1944,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_NOPAD};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76349,"byte_end":76404,"line_start":1945,"line_end":1945,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76405,"byte_end":76445,"line_start":1946,"line_end":1946,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76446,"byte_end":76508,"line_start":1947,"line_end":1947,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76509,"byte_end":76564,"line_start":1948,"line_end":1948,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":76565,"byte_end":76572,"line_start":1949,"line_end":1949,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":184},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79509,"byte_end":79518,"line_start":1993,"line_end":1993,"column_start":11,"column_end":20},"name":"BASE32HEX","qualname":"::BASE32HEX","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base32hex encoding","sig":null,"attributes":[{"value":"/ Padded base32hex encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79058,"byte_end":79087,"line_start":1978,"line_end":1978,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79088,"byte_end":79091,"line_start":1979,"line_end":1979,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79092,"byte_end":79133,"line_start":1980,"line_end":1980,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79134,"byte_end":79137,"line_start":1981,"line_end":1981,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79138,"byte_end":79149,"line_start":1982,"line_end":1982,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79150,"byte_end":79202,"line_start":1983,"line_end":1983,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79203,"byte_end":79243,"line_start":1984,"line_end":1984,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79244,"byte_end":79306,"line_start":1985,"line_end":1985,"column_start":1,"column_end":63}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79307,"byte_end":79336,"line_start":1986,"line_end":1986,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE32HEX, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79337,"byte_end":79389,"line_start":1987,"line_end":1987,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79390,"byte_end":79397,"line_start":1988,"line_end":1988,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79398,"byte_end":79401,"line_start":1989,"line_end":1989,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79402,"byte_end":79433,"line_start":1990,"line_end":1990,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79434,"byte_end":79437,"line_start":1991,"line_end":1991,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-7","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":79438,"byte_end":79498,"line_start":1992,"line_end":1992,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":186},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82308,"byte_end":82323,"line_start":2031,"line_end":2031,"column_start":11,"column_end":26},"name":"BASE32HEX_NOPAD","qualname":"::BASE32HEX_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base32hex encoding","sig":null,"attributes":[{"value":"/ Unpadded base32hex encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":81974,"byte_end":82005,"line_start":2021,"line_end":2021,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82006,"byte_end":82009,"line_start":2022,"line_end":2022,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82010,"byte_end":82051,"line_start":2023,"line_end":2023,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82052,"byte_end":82055,"line_start":2024,"line_end":2024,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82056,"byte_end":82067,"line_start":2025,"line_end":2025,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32HEX_NOPAD};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82068,"byte_end":82126,"line_start":2026,"line_end":2026,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82127,"byte_end":82167,"line_start":2027,"line_end":2027,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82168,"byte_end":82230,"line_start":2028,"line_end":2028,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(BASE32HEX_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82231,"byte_end":82289,"line_start":2029,"line_end":2029,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":82290,"byte_end":82297,"line_start":2030,"line_end":2030,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":188},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85484,"byte_end":85497,"line_start":2079,"line_end":2079,"column_start":11,"column_end":24},"name":"BASE32_DNSSEC","qualname":"::BASE32_DNSSEC","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSSEC base32 encoding","sig":null,"attributes":[{"value":"/ DNSSEC base32 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84792,"byte_end":84818,"line_start":2059,"line_end":2059,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84819,"byte_end":84822,"line_start":2060,"line_end":2060,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84823,"byte_end":84864,"line_start":2061,"line_end":2061,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84865,"byte_end":84868,"line_start":2062,"line_end":2062,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84869,"byte_end":84880,"line_start":2063,"line_end":2063,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE32_DNSSEC};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84881,"byte_end":84937,"line_start":2064,"line_end":2064,"column_start":1,"column_end":57}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84938,"byte_end":84978,"line_start":2065,"line_end":2065,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789abcdefghijklmnopqrstuv\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":84979,"byte_end":85041,"line_start":2066,"line_end":2066,"column_start":1,"column_end":63}},{"value":"/ spec.translate.from.push_str(\"ABCDEFGHIJKLMNOPQRSTUV\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85042,"byte_end":85101,"line_start":2067,"line_end":2067,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"abcdefghijklmnopqrstuv\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85102,"byte_end":85159,"line_start":2068,"line_end":2068,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSSEC, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85160,"byte_end":85216,"line_start":2069,"line_end":2069,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85217,"byte_end":85224,"line_start":2070,"line_end":2070,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85225,"byte_end":85228,"line_start":2071,"line_end":2071,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC5155]:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85229,"byte_end":85260,"line_start":2072,"line_end":2072,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85261,"byte_end":85264,"line_start":2073,"line_end":2073,"column_start":1,"column_end":4}},{"value":"/ - It uses a base32 extended hex alphabet.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85265,"byte_end":85310,"line_start":2074,"line_end":2074,"column_start":1,"column_end":46}},{"value":"/ - It is case-insensitive when decoding and uses lowercase when encoding.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85311,"byte_end":85387,"line_start":2075,"line_end":2075,"column_start":1,"column_end":77}},{"value":"/ - It does not use padding.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85388,"byte_end":85418,"line_start":2076,"line_end":2076,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85419,"byte_end":85422,"line_start":2077,"line_end":2077,"column_start":1,"column_end":4}},{"value":"/ [RFC5155]: https://tools.ietf.org/html/rfc5155","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":85423,"byte_end":85473,"line_start":2078,"line_end":2078,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":190},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88709,"byte_end":88724,"line_start":2126,"line_end":2126,"column_start":11,"column_end":26},"name":"BASE32_DNSCURVE","qualname":"::BASE32_DNSCURVE","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" DNSCurve base32 encoding","sig":null,"attributes":[{"value":"/ DNSCurve base32 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88100,"byte_end":88128,"line_start":2109,"line_end":2109,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88129,"byte_end":88132,"line_start":2110,"line_end":2110,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88133,"byte_end":88174,"line_start":2111,"line_end":2111,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88175,"byte_end":88178,"line_start":2112,"line_end":2112,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88179,"byte_end":88190,"line_start":2113,"line_end":2113,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{BitOrder, Specification, BASE32_DNSCURVE};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88191,"byte_end":88259,"line_start":2114,"line_end":2114,"column_start":1,"column_end":69}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88260,"byte_end":88300,"line_start":2115,"line_end":2115,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"0123456789bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88301,"byte_end":88363,"line_start":2116,"line_end":2116,"column_start":1,"column_end":63}},{"value":"/ spec.bit_order = BitOrder::LeastSignificantFirst;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88364,"byte_end":88417,"line_start":2117,"line_end":2117,"column_start":1,"column_end":54}},{"value":"/ spec.translate.from.push_str(\"BCDFGHJKLMNPQRSTUVWXYZ\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88418,"byte_end":88477,"line_start":2118,"line_end":2118,"column_start":1,"column_end":60}},{"value":"/ spec.translate.to.push_str(\"bcdfghjklmnpqrstuvwxyz\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88478,"byte_end":88535,"line_start":2119,"line_end":2119,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(BASE32_DNSCURVE, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88536,"byte_end":88594,"line_start":2120,"line_end":2120,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88595,"byte_end":88602,"line_start":2121,"line_end":2121,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88603,"byte_end":88606,"line_start":2122,"line_end":2122,"column_start":1,"column_end":4}},{"value":"/ It is conform to [DNSCurve].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88607,"byte_end":88639,"line_start":2123,"line_end":2123,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88640,"byte_end":88643,"line_start":2124,"line_end":2124,"column_start":1,"column_end":4}},{"value":"/ [DNSCurve]: https://dnscurve.org/in-implement.html","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":88644,"byte_end":88698,"line_start":2125,"line_end":2125,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":192},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91813,"byte_end":91819,"line_start":2171,"line_end":2171,"column_start":11,"column_end":17},"name":"BASE64","qualname":"::BASE64","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64 encoding","sig":null,"attributes":[{"value":"/ Padded base64 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91339,"byte_end":91365,"line_start":2156,"line_end":2156,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91366,"byte_end":91369,"line_start":2157,"line_end":2157,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91370,"byte_end":91411,"line_start":2158,"line_end":2158,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91412,"byte_end":91415,"line_start":2159,"line_end":2159,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91416,"byte_end":91427,"line_start":2160,"line_end":2160,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91428,"byte_end":91477,"line_start":2161,"line_end":2161,"column_start":1,"column_end":50}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91478,"byte_end":91518,"line_start":2162,"line_end":2162,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91519,"byte_end":91613,"line_start":2163,"line_end":2163,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91614,"byte_end":91643,"line_start":2164,"line_end":2164,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91644,"byte_end":91693,"line_start":2165,"line_end":2165,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91694,"byte_end":91701,"line_start":2166,"line_end":2166,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91702,"byte_end":91705,"line_start":2167,"line_end":2167,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91706,"byte_end":91737,"line_start":2168,"line_end":2168,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91738,"byte_end":91741,"line_start":2169,"line_end":2169,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-4","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":91742,"byte_end":91802,"line_start":2170,"line_end":2170,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":194},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94690,"byte_end":94702,"line_start":2210,"line_end":2210,"column_start":11,"column_end":23},"name":"BASE64_NOPAD","qualname":"::BASE64_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64 encoding","sig":null,"attributes":[{"value":"/ Unpadded base64 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94333,"byte_end":94361,"line_start":2200,"line_end":2200,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94362,"byte_end":94365,"line_start":2201,"line_end":2201,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94366,"byte_end":94407,"line_start":2202,"line_end":2202,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94408,"byte_end":94411,"line_start":2203,"line_end":2203,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94412,"byte_end":94423,"line_start":2204,"line_end":2204,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64_NOPAD};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94424,"byte_end":94479,"line_start":2205,"line_end":2205,"column_start":1,"column_end":56}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94480,"byte_end":94520,"line_start":2206,"line_end":2206,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94521,"byte_end":94615,"line_start":2207,"line_end":2207,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94616,"byte_end":94671,"line_start":2208,"line_end":2208,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":94672,"byte_end":94679,"line_start":2209,"line_end":2209,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":196},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97863,"byte_end":97874,"line_start":2257,"line_end":2257,"column_start":11,"column_end":22},"name":"BASE64_MIME","qualname":"::BASE64_MIME","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" MIME base64 encoding","sig":null,"attributes":[{"value":"/ MIME base64 encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97229,"byte_end":97253,"line_start":2239,"line_end":2239,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97254,"byte_end":97257,"line_start":2240,"line_end":2240,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97258,"byte_end":97299,"line_start":2241,"line_end":2241,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97300,"byte_end":97303,"line_start":2242,"line_end":2242,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97304,"byte_end":97315,"line_start":2243,"line_end":2243,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, Wrap, BASE64_MIME};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97316,"byte_end":97376,"line_start":2244,"line_end":2244,"column_start":1,"column_end":61}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97377,"byte_end":97417,"line_start":2245,"line_end":2245,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97418,"byte_end":97512,"line_start":2246,"line_end":2246,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97513,"byte_end":97542,"line_start":2247,"line_end":2247,"column_start":1,"column_end":30}},{"value":"/ spec.wrap.width = 76;","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97543,"byte_end":97568,"line_start":2248,"line_end":2248,"column_start":1,"column_end":26}},{"value":"/ spec.wrap.separator.push_str(\"\\r\\n\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97569,"byte_end":97610,"line_start":2249,"line_end":2249,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(BASE64_MIME, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97611,"byte_end":97665,"line_start":2250,"line_end":2250,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97666,"byte_end":97673,"line_start":2251,"line_end":2251,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97674,"byte_end":97677,"line_start":2252,"line_end":2252,"column_start":1,"column_end":4}},{"value":"/ It is not exactly conform to [RFC2045] because it does not print the header","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97678,"byte_end":97757,"line_start":2253,"line_end":2253,"column_start":1,"column_end":80}},{"value":"/ and does not ignore all characters.","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97758,"byte_end":97797,"line_start":2254,"line_end":2254,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97798,"byte_end":97801,"line_start":2255,"line_end":2255,"column_start":1,"column_end":4}},{"value":"/ [RFC2045]: https://tools.ietf.org/html/rfc2045","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":97802,"byte_end":97852,"line_start":2256,"line_end":2256,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":198},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100893,"byte_end":100902,"line_start":2301,"line_end":2301,"column_start":11,"column_end":20},"name":"BASE64URL","qualname":"::BASE64URL","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Padded base64url encoding","sig":null,"attributes":[{"value":"/ Padded base64url encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100410,"byte_end":100439,"line_start":2286,"line_end":2286,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100440,"byte_end":100443,"line_start":2287,"line_end":2287,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100444,"byte_end":100485,"line_start":2288,"line_end":2288,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100486,"byte_end":100489,"line_start":2289,"line_end":2289,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100490,"byte_end":100501,"line_start":2290,"line_end":2290,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100502,"byte_end":100554,"line_start":2291,"line_end":2291,"column_start":1,"column_end":53}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100555,"byte_end":100595,"line_start":2292,"line_end":2292,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100596,"byte_end":100690,"line_start":2293,"line_end":2293,"column_start":1,"column_end":95}},{"value":"/ spec.padding = Some('=');","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100691,"byte_end":100720,"line_start":2294,"line_end":2294,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(BASE64URL, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100721,"byte_end":100773,"line_start":2295,"line_end":2295,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100774,"byte_end":100781,"line_start":2296,"line_end":2296,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100782,"byte_end":100785,"line_start":2297,"line_end":2297,"column_start":1,"column_end":4}},{"value":"/ It is conform to [RFC4648].","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100786,"byte_end":100817,"line_start":2298,"line_end":2298,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100818,"byte_end":100821,"line_start":2299,"line_end":2299,"column_start":1,"column_end":4}},{"value":"/ [RFC4648]: https://tools.ietf.org/html/rfc4648#section-5","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":100822,"byte_end":100882,"line_start":2300,"line_end":2300,"column_start":1,"column_end":61}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103788,"byte_end":103803,"line_start":2340,"line_end":2340,"column_start":11,"column_end":26},"name":"BASE64URL_NOPAD","qualname":"::BASE64URL_NOPAD","value":"Encoding","parent":null,"children":[],"decl_id":null,"docs":" Unpadded base64url encoding","sig":null,"attributes":[{"value":"/ Unpadded base64url encoding","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103422,"byte_end":103453,"line_start":2330,"line_end":2330,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103454,"byte_end":103457,"line_start":2331,"line_end":2331,"column_start":1,"column_end":4}},{"value":"/ This encoding is a static version of:","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103458,"byte_end":103499,"line_start":2332,"line_end":2332,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103500,"byte_end":103503,"line_start":2333,"line_end":2333,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103504,"byte_end":103515,"line_start":2334,"line_end":2334,"column_start":1,"column_end":12}},{"value":"/ # use data_encoding::{Specification, BASE64URL_NOPAD};","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103516,"byte_end":103574,"line_start":2335,"line_end":2335,"column_start":1,"column_end":59}},{"value":"/ let mut spec = Specification::new();","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103575,"byte_end":103615,"line_start":2336,"line_end":2336,"column_start":1,"column_end":41}},{"value":"/ spec.symbols.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\");","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103616,"byte_end":103710,"line_start":2337,"line_end":2337,"column_start":1,"column_end":95}},{"value":"/ assert_eq!(BASE64URL_NOPAD, spec.encoding().unwrap());","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103711,"byte_end":103769,"line_start":2338,"line_end":2338,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":103770,"byte_end":103777,"line_start":2339,"line_end":2339,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":8744,"byte_end":8746,"line_start":231,"line_end":231,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":8879,"byte_end":8881,"line_start":239,"line_end":239,"column_start":37,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11097,"byte_end":11107,"line_start":318,"line_end":318,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11852,"byte_end":11863,"line_start":342,"line_end":342,"column_start":28,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11918,"byte_end":11929,"line_start":344,"line_end":344,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44561,"byte_end":44574,"line_start":1232,"line_end":1232,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44638,"byte_end":44646,"line_start":1238,"line_end":1238,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55392,"byte_end":55410,"line_start":1555,"line_end":1555,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56141,"byte_end":56159,"line_start":1571,"line_end":1571,"column_start":28,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56711,"byte_end":56724,"line_start":1587,"line_end":1587,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":8190,"byte_end":8194,"line_start":204,"line_end":204,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":1914},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":8744,"byte_end":8746,"line_start":231,"line_end":231,"column_start":37,"column_end":39},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":258},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":8879,"byte_end":8881,"line_start":239,"line_end":239,"column_start":37,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":263},"to":{"krate":0,"index":7}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11097,"byte_end":11107,"line_start":318,"line_end":318,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":272},"to":{"krate":2,"index":6073}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11852,"byte_end":11863,"line_start":342,"line_end":342,"column_start":28,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":292},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":11918,"byte_end":11929,"line_start":344,"line_end":344,"column_start":28,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":292},"to":{"krate":2,"index":6073}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44561,"byte_end":44574,"line_start":1232,"line_end":1232,"column_start":18,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":367},"to":{"krate":2,"index":1895}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":44638,"byte_end":44646,"line_start":1238,"line_end":1238,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":339},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":55392,"byte_end":55410,"line_start":1555,"line_end":1555,"column_start":28,"column_end":46},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":6073}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56141,"byte_end":56159,"line_start":1571,"line_end":1571,"column_start":28,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":404},"to":{"krate":1,"index":1634}},{"span":{"file_name":"/Users/aidanm/.cargo/registry/src/github.com-1ecc6299db9ec823/data-encoding-2.2.0/src/lib.rs","byte_start":56711,"byte_end":56724,"line_start":1587,"line_end":1587,"column_start":6,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":367},"to":{"krate":4294967295,"index":4294967295}}]}